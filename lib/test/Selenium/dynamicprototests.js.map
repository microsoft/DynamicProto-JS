{"version":3,"file":"dynamicprototests.js","sourceRoot":"","sources":["../TestFramework/Assert.ts","../TestFramework/TestCase.ts","../TestFramework/TestClass.ts","../TestFramework/Common.ts","../../src/DynamicProto.ts","../DynamicProto.Tests.ts","../DynamicProtoMultipleCall.Tests.ts","../DynamicProtoNoInst.Tests.ts","../DynamicProtoMultipleNoInst.Tests.ts","../SecurityCheck.Tests.ts","DynamicProtoTests.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../External/qunit.d.ts\" />\n\n/** \n * Wrapper around QUnit asserts. This class has two purposes:\n * - Make Assertion methods easy to discover.\n * - Make them consistent with XUnit assertions in the order of the actual and expected parameter values.\n */\nclass Assert {\n   /**\n    * A deep recursive comparison assertion, working on primitive types, arrays, objects, \n    * regular expressions, dates and functions.\n    *\n    * The deepEqual() assertion can be used just like equal() when comparing the value of \n    * objects, such that { key: value } is equal to { key: value }. For non-scalar values, \n    * identity will be disregarded by deepEqual.\n    *\n    * @param expected Known comparison value\n    * @param actual Object or Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static deepEqual(expected: any, actual: any, message?: string): any {\n        return deepEqual(actual, expected, message);\n    }\n\n   /** \n    * A non-strict comparison assertion, roughly equivalent to JUnit assertEquals.\n    *\n    * The equal assertion uses the simple comparison operator (==) to compare the actual \n    * and expected arguments. When they are equal, the assertion passes: any; otherwise, it fails. \n    * When it fails, both actual and expected values are displayed in the test result, \n    * in addition to a given message.\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static equal(expected: any, actual: any, message?: string): any {\n        return equal(actual, expected, message);\n    }\n\n   /**\n    * An inverted deep recursive comparison assertion, working on primitive types, \n    * arrays, objects, regular expressions, dates and functions.\n    *\n    * The notDeepEqual() assertion can be used just like equal() when comparing the \n    * value of objects, such that { key: value } is equal to { key: value }. For non-scalar \n    * values, identity will be disregarded by notDeepEqual.\n    * \n    * @param expected Known comparison value\n    * @param actual Object or Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static notDeepEqual(expected: any, actual: any, message?: string): any {\n        return notDeepEqual(actual, expected, message);\n    }\n\n   /**\n    * A non-strict comparison assertion, checking for inequality.\n    *\n    * The notEqual assertion uses the simple inverted comparison operator (!=) to compare \n    * the actual and expected arguments. When they aren't equal, the assertion passes: any; \n    * otherwise, it fails. When it fails, both actual and expected values are displayed \n    * in the test result, in addition to a given message.\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static notEqual(expected: any, actual: any, message?: string): any {\n        return notEqual(actual, expected, message);\n    }\n\n    public static notPropEqual(expected: any, actual: any, message?: string): any {\n        return notPropEqual(actual, expected, message);\n    }\n\n    public static propEqual(expected: any, actual: any, message?: string): any {\n        return propEqual(actual, expected, message);\n    }\n\n   /**\n    * A non-strict comparison assertion, checking for inequality.\n    *\n    * The notStrictEqual assertion uses the strict inverted comparison operator (!==) \n    * to compare the actual and expected arguments. When they aren't equal, the assertion \n    * passes: any; otherwise, it fails. When it fails, both actual and expected values are \n    * displayed in the test result, in addition to a given message.\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static notStrictEqual(expected: any, actual: any, message?: string): any {\n        return notStrictEqual(actual, expected, message);\n    }\n\n   /**\n    * A boolean assertion, equivalent to CommonJS's assert.ok() and JUnit's assertTrue(). \n    * Passes if the first argument is truthy.\n    *\n    * The most basic assertion in QUnit, ok() requires just one argument. If the argument \n    * evaluates to true, the assertion passes; otherwise, it fails. If a second message \n    * argument is provided, it will be displayed in place of the result.\n    * \n    * @param state Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static ok(state: any, message?: string): any {\n        return ok(state, message);\n    }\n\n   /**\n    * A strict type and value comparison assertion.\n    *\n    * The strictEqual() assertion provides the most rigid comparison of type and value with \n    * the strict equality operator (===)\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static strictEqual(expected: any, actual: any, message?: string): any {\n        return strictEqual(actual, expected, message);\n    }\n\n   /**\n    * Assertion to test if a callback throws an exception when run.\n    * \n    * When testing code that is expected to throw an exception based on a specific set of \n    * circumstances, use throws() to catch the error object for testing and comparison.\n    * \n    * @param block Function to execute\n    * @param expected Error Object to compare\n    * @param message A short description of the assertion\n    */\n    public static throws(block: () => any, expected: any, message?: string): any;\n\n   /**\n    * @param block Function to execute\n    * @param message A short description of the assertion\n    */\n    public static throws(block: () => any, message?: string): any;\n\n    public static throws(block: () => any, expected?: any, message?: string): any {\n        return throws(block, expected, message);\n    }\n}","\n/** Defines a test case */\nclass TestCase {\n    /** Name to use for the test case */\n    public name: string;\n\n    /** Test case method */\n    public test: () => void;\n}\n\n\n/** Defines a test case */\ninterface TestCaseAsync {\n    /** Name to use for the test case */\n    name: string;\n\n    /** time to wait after pre before invoking post and calling start() */\n    stepDelay: number;\n\n    /** async steps */\n    steps: Array<() => void>;\n}","/// <reference path=\"../External/sinon.d.ts\" />\n/// <reference path=\"../External/qunit.d.ts\" />\n/// <reference path=\"Assert.ts\" />\n/// <reference path=\"./TestCase.ts\"/>\n\nclass TestClass {\n\n    constructor(name?: string) {\n        QUnit.module(name);\n    }\n\n    public static isPollingStepFlag = \"isPollingStep\";\n\n    /** The instance of the currently running suite. */\n    public static currentTestClass: TestClass;\n\n    /** Turns on/off sinon's syncronous implementation of setTimeout. On by default. */\n    public useFakeTimers: boolean = true;\n\n    /** Turns on/off sinon's fake implementation of XMLHttpRequest. On by default. */\n    public useFakeServer: boolean = true;\n\n    /** Method called before the start of each test method */\n    public testInitialize() {\n    }\n\n    /** Method called after each test method has completed */\n    public testCleanup() {\n    }\n\n    /** Method in which test class intances should call this.testCase(...) to register each of this suite's tests. */\n    public registerTests() {\n    }\n\n    /** Register an async Javascript unit testcase. */\n    public testCaseAsync(testInfo: TestCaseAsync) {\n        if (!testInfo.name) {\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\n        }\n\n        if (isNaN(testInfo.stepDelay)) {\n            throw new Error(\"Must specify 'stepDelay' period between pre and post\");\n        }\n\n        if (!testInfo.steps) {\n            throw new Error(\"Must specify 'steps' to take asynchronously\");\n        }\n\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\n        const testMethod = (assert) => {\n            const done = assert.async();\n\n            // Save off the instance of the currently running suite.\n            TestClass.currentTestClass = this;\n\n            // Run the test.\n            try {\n                this._testStarting();\n\n                const steps = testInfo.steps;\n                const trigger = () => {\n                    if (steps.length) {\n                        const step = steps.shift();\n\n                        // The callback which activates the next test step. \n                        const nextTestStepTrigger = () => {\n                            setTimeout(() => {\n                                trigger();\n                            }, testInfo.stepDelay);\n                        };\n\n                        // There 2 types of test steps - simple and polling.\n                        // Upon completion of the simple test step the next test step will be called.\n                        // In case of polling test step the next test step is passed to the polling test step, and\n                        // it is responsibility of the polling test step to call the next test step.\n                        try {\n                            if (step[TestClass.isPollingStepFlag]) {\n                                step.call(this, nextTestStepTrigger);\n                            } else {\n                                step.call(this);\n                                nextTestStepTrigger.call(this);\n                            }\n                        } catch (e) {\n                            this._testCompleted();\n                            Assert.ok(false, e.toString());\n\n                            // done is QUnit callback indicating the end of the test\n                            done();\n\n                            return;\n                        }\n                    } else {\n                        this._testCompleted();\n\n                        // done is QUnit callback indicating the end of the test\n                        done();\n                    }\n                };\n\n                trigger();\n            } catch (ex) {\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\n                this._testCompleted(true);\n\n                // done is QUnit callback indicating the end of the test\n                done();\n            }\n        };\n\n        // Register the test with QUnit\n        QUnit.test(testInfo.name, testMethod);\n    }\n\n    /** Register a Javascript unit testcase. */\n    public testCase(testInfo: TestCase) {\n        if (!testInfo.name) {\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\n        }\n\n        if (!testInfo.test) {\n            throw new Error(\"Must specify 'test' method in testInfo context in registerTestcase call\");\n        }\n\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\n        const testMethod = () => {\n            // Save off the instance of the currently running suite.\n            TestClass.currentTestClass = this;\n\n            // Run the test.\n            try {\n                this._testStarting();\n\n                testInfo.test.call(this);\n\n                this._testCompleted();\n            }\n            catch (ex) {\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\n                this._testCompleted(true);\n            }\n        };\n\n        // Register the test with QUnit\n        test(testInfo.name, testMethod);\n    }\n\n    /** Called when the test is starting. */\n    private _testStarting() {\n        // Initialize the sandbox similar to what is done in sinon.js \"test()\" override. See note on class.\n        const config = (sinon as any).getConfig(sinon.config);\n        config.useFakeTimers = this.useFakeTimers;\n        config.useFakeServer = this.useFakeServer;\n\n        config.injectInto = config.injectIntoThis && this || config.injectInto;\n        this.sandbox = sinon.sandbox.create(config);\n        this.server = this.sandbox.server;\n\n        // Allow the derived class to perform test initialization.\n        this.testInitialize();\n    }\n\n    /** Called when the test is completed. */\n    private _testCompleted(failed?: boolean) {\n        if (failed) {\n            // Just cleanup the sandbox since the test has already failed.\n            this.sandbox.restore();\n        }\n        else {\n            // Verify the sandbox and restore.\n            (this.sandbox as any).verifyAndRestore();\n        }\n\n        this.testCleanup();\n\n        // Clear the instance of the currently running suite.\n        TestClass.currentTestClass = null;\n    }\n\n    /**** Sinon methods and properties ***/\n\n    // These methods and properties are injected by Sinon and will override the implementation here.\n    // These are here purely to make typescript happy.\n    public clock: SinonFakeTimers;\n    public server: SinonFakeServer;\n    public sandbox: SinonSandbox;\n\n    /** Creates an anonymous function that records arguments, this value, exceptions and return values for all calls. */\n    public spy(): SinonSpy;\n    /** Spies on the provided function */\n    public spy(funcToWrap: Function): SinonSpy;\n    /** Creates a spy for object.methodName and replaces the original method with the spy. The spy acts exactly like the original method in all cases. The original method can be restored by calling object.methodName.restore(). The returned spy is the function object which replaced the original method. spy === object.method. */\n    public spy(object: any, methodName: string, func?: Function): SinonSpy;\n    public spy(...args: any[]): SinonSpy { return null; }\n\n    /** Creates an anonymous stub function. */\n    public stub(): SinonStub;\n    /** Stubs all the object's methods. */\n    public stub(object: any): SinonStub;\n    /** Replaces object.methodName with a func, wrapped in a spy. As usual, object.methodName.restore(); can be used to restore the original method. */\n    public stub(object: any, methodName: string, func?: Function): SinonStub;\n    public stub(...args: any[]): SinonStub { return null; }\n\n    /** Creates a mock for the provided object.Does not change the object, but returns a mock object to set expectations on the object's methods. */\n    public mock(object: any): SinonMock { return null; }\n\n    /**** end: Sinon methods and properties ***/\n\n    /** Sends a JSON response to the provided request.\n     * @param request The request to respond to.\n     * @param data Data to respond with.\n     * @param errorCode Optional error code to send with the request, default is 200\n    */\n    public sendJsonResponse(request: SinonFakeXMLHttpRequest, data: any, errorCode?: number) {\n        if (errorCode === undefined) {\n            errorCode = 200;\n        }\n\n        request.respond(\n            errorCode,\n            { \"Content-Type\": \"application/json\" },\n            JSON.stringify(data));\n    }\n\n    protected setUserAgent(userAgent: string) {\n        Object.defineProperty(window.navigator, 'userAgent',\n            {\n                configurable: true,\n                get () {\n                    return userAgent;\n                }\n            });\n    }\n}\n\n// Configure Sinon\nsinon.assert.fail = function (msg?) {\n    Assert.ok(false, msg);\n};\n\nsinon.assert.pass = function (assertion) {\n    Assert.ok(assertion, \"sinon assert\");\n};\n\nsinon.config = {\n    injectIntoThis: true,\n    injectInto: null,\n    properties: [\"spy\", \"stub\", \"mock\", \"clock\", \"sandbox\"],\n    useFakeTimers: true,\n    useFakeServer: true\n};\n","/// <reference path=\"../External/sinon.d.ts\" />\n/// <reference path=\"../External/qunit.d.ts\" />\n/// <reference path=\"Assert.ts\" />\n/// <reference path=\"TestClass.ts\" />\n/// <reference path=\"TestCase.ts\" />","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getGlobal, objCreate, objHasOwnProperty, throwTypeError } from \"@nevware21/ts-utils\";\n\ninterface DynamicGlobalSettings {\n    /**\n     * Stores the global options which will also be exposed on the runtime global\n     */\n    o: IDynamicProtoOpts,\n\n    /**\n     * Internal Global used to generate a unique dynamic class name, every new class will increase this value\n     * @ignore\n     */ \n    n: number\n};\n\n\n\n/**\n * Helper to check if we're running in a restricted environment that doesn't support\n * property redefinition, like Cloudflare Workers. This is primarily used to avoid\n * operations that would cause issues in these environments.\n * @ignore\n */\nfunction _isRestrictedEnvironment(): boolean {\n    try {\n        // Test if we can perform property definition/redefinition\n        // This specifically targets restricted environments like Cloudflare Workers\n        // where property redefinition causes errors\n        let testObj = {};\n        let testProp = \"testProperty\";\n        Object.defineProperty(testObj, testProp, { \n            configurable: true,\n            value: 1\n        });\n        Object.defineProperty(testObj, testProp, {\n            configurable: true,\n            value: 2\n        });\n        \n        // If we can redefine properties, not a restricted environment\n        return false;\n    } catch (e) {\n        // If property redefinition fails, we're in a restricted environment\n        return true;\n    }\n}\n\n/**\n * Constant string defined to support minimization\n * @ignore\n */ \nconst Constructor = 'constructor';\n\n/**\n * Constant string defined to support minimization\n * @ignore\n */ \nconst Prototype = 'prototype';\n \n/**\n * Constant string defined to support minimization\n * @ignore\n */\nconst strFunction = 'function';\n\n/**\n * Used to define the name of the instance function lookup table\n * @ignore\n */ \nconst DynInstFuncTable = '_dynInstFuncs';\n \n/**\n * Name used to tag the dynamic prototype function\n * @ignore\n */ \nconst DynProxyTag = '_isDynProxy';\n \n/**\n * Name added to a prototype to define the dynamic prototype \"class\" name used to lookup the function table\n * @ignore\n */ \nconst DynClassName = '_dynClass';\n \n/**\n * Prefix added to the classname to avoid any name clashes with other instance level properties\n * @ignore\n */ \nconst DynClassNamePrefix = '_dynCls$';\n \n/**\n * A tag which is used to check if we have already to attempted to set the instance function if one is not present\n * @ignore\n */\nconst DynInstChkTag = '_dynInstChk';\n \n/**\n * A tag which is used to check if we are allows to try and set an instance function is one is not present. Using the same \n * tag name as the function level but a different const name for readability only.\n */\nconst DynAllowInstChkTag = DynInstChkTag;\n \n/**\n * The global (imported) instances where the global performance options are stored\n */\nconst DynProtoDefaultOptions = '_dfOpts';\n \n/**\n * Value used as the name of a class when it cannot be determined\n * @ignore\n */ \nconst UnknownValue = '_unknown_';\n \n/**\n * Constant string defined to support minimization\n * @ignore\n */\nconst str__Proto = \"__proto__\";\n \n/**\n * The polyfill version of __proto__ so that it doesn't cause issues for anyone not expecting it to exist\n */\nconst DynProtoBaseProto = \"_dyn\" + str__Proto;\n\n/**\n * Runtime Global holder for dynamicProto settings\n */\nconst DynProtoGlobalSettings = \"__dynProto$Gbl\";\n\n/**\n * Track the current prototype for IE8 as you can't look back to get the prototype\n */\nconst DynProtoCurrent = \"_dynInstProto\";\n  \n/**\n * Constant string defined to support minimization\n * @ignore\n */\nconst strUseBaseInst = 'useBaseInst';\n \n/**\n * Constant string defined to support minimization\n * @ignore\n */\nconst strSetInstFuncs = 'setInstFuncs';\n \nconst Obj = Object;\n\n/**\n * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)\n * @ignore\n */\nlet _objGetPrototypeOf = Obj[\"getPrototypeOf\"];\n\n/**\n * Pre-lookup to check for the existence of this function\n */\nlet _objGetOwnProps = Obj[\"getOwnPropertyNames\"];\n\n// Since 1.1.7 moving these to the runtime global to work around mixed version and module issues\n// See Issue https://github.com/microsoft/DynamicProto-JS/issues/57 for details\nlet _gbl = getGlobal();\nlet _gblInst: DynamicGlobalSettings = _gbl[DynProtoGlobalSettings] || (_gbl[DynProtoGlobalSettings] = {\n    o: {\n        [strSetInstFuncs]: true,\n        [strUseBaseInst]: true\n    },\n    n: 1000                // Start new global index @ 1000 so we \"fix\" some cases when mixed with 1.1.6 or earlier\n});\n\n/**\n * Helper used to check whether the target is an Object prototype or Array prototype\n * @ignore\n */ \nfunction _isObjectOrArrayPrototype(target:any) {\n    return target && (target === Obj[Prototype] || target === Array[Prototype]);\n}\n\n/**\n * Helper used to check whether the target is an Object prototype, Array prototype or Function prototype\n * @ignore\n */ \nfunction _isObjectArrayOrFunctionPrototype(target:any) {\n    return _isObjectOrArrayPrototype(target) || target === Function[Prototype];\n}\n\n/**\n * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.\n * @ignore\n */ \nfunction _getObjProto(target:any) {\n    let newProto;\n\n    if (target) {\n        // This method doesn't exist in older browsers (e.g. IE8)\n        if (_objGetPrototypeOf) {\n            return _objGetPrototypeOf(target);\n        }\n\n        let curProto = target[str__Proto] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);\n\n        // Using the pre-calculated value as IE8 doesn't support looking up the prototype of a prototype and thus fails for more than 1 base class\n        newProto = target[DynProtoBaseProto] || curProto;\n        if (!objHasOwnProperty(target, DynProtoBaseProto)) {\n            // As this prototype doesn't have this property then this is from an inherited class so newProto is the base to return so save it\n            // so we can look it up value (which for a multiple hierarchy dynamicProto will be the base class)\n            delete target[DynProtoCurrent];     // Delete any current value allocated to this instance so we pick up the value from prototype hierarchy\n            newProto = target[DynProtoBaseProto] = target[DynProtoCurrent] || target[DynProtoBaseProto];\n            target[DynProtoCurrent] = curProto;\n        }\n    }\n\n    return newProto;\n}\n\n/**\n * Helper to get the properties of an object, including none enumerable ones as functions on a prototype in ES6\n * are not enumerable.\n * @param target \n */\nfunction _forEachProp(target: any, func: (name: string) => void) {\n    let props: string[] = [];\n    if (_objGetOwnProps) {\n        props = _objGetOwnProps(target);\n    } else {\n        for (let name in target) {\n            if (typeof name === \"string\" && objHasOwnProperty(target, name)) {\n                props.push(name);\n            }\n        }\n    }\n\n    if (props && props.length > 0) {\n        for (let lp = 0; lp < props.length; lp++) {\n            func(props[lp]);\n        }\n    }\n}\n\n/**\n * Helper function to check whether the provided function name is a potential candidate for dynamic\n * callback and prototype generation.\n * @param target The target object, may be a prototype or class object\n * @param funcName The function name\n * @param skipOwn Skips the check for own property\n * @ignore\n */\nfunction _isDynamicCandidate(target:any, funcName:string, skipOwn:boolean) {\n    return (funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || objHasOwnProperty(target, funcName)) && funcName !== str__Proto && funcName !== Prototype);\n}\n\n/**\n * Helper to throw a TypeError exception\n * @param message the message\n * @ignore\n */\nfunction _throwTypeError(message:string) {\n    throwTypeError(\"DynamicProto: \" + message);\n}\n\n/**\n * Returns a collection of the instance functions that are defined directly on the thisTarget object, it does \n * not return any inherited functions\n * @param thisTarget The object to get the instance functions from\n * @ignore\n */\nfunction _getInstanceFuncs(thisTarget:any): any {\n    // Get the base proto\n    var instFuncs = objCreate(null);\n\n    // Save any existing instance functions\n    _forEachProp(thisTarget, (name) => {\n        // Don't include any dynamic prototype instances - as we only want the real functions\n        if (!instFuncs[name] && _isDynamicCandidate(thisTarget, name, false)) {\n            // Create an instance callback for passing the base function to the caller\n            instFuncs[name] = thisTarget[name];\n        }\n    });\n\n    return instFuncs;\n}\n\n/**\n * Returns whether the value is included in the array\n * @param values The array of values\n * @param value  The value\n */\nfunction _hasVisited(values:any[], value:any) {\n    for (let lp = values.length - 1; lp >= 0; lp--) {\n        if (values[lp] === value) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Returns an object that contains callback functions for all \"base/super\" functions, this is used to \"save\"\n * enabling calling super.xxx() functions without requiring that the base \"class\" has defined a prototype references\n * @param target The current instance\n * @ignore\n */\nfunction _getBaseFuncs(classProto:any, thisTarget:any, instFuncs:any, useBaseInst:boolean): any {\n    function _instFuncProxy(target:any, funcHost: any,  funcName: string) {\n        let theFunc = funcHost[funcName];\n        if (theFunc[DynProxyTag] && useBaseInst) {\n            // grab and reuse the hosted looking function (if available) otherwise the original passed function\n            let instFuncTable = target[DynInstFuncTable] || {};\n            if (instFuncTable[DynAllowInstChkTag] !== false) {\n                theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc;\n            }\n        }\n\n        return function() {\n            // eslint-disable-next-line prefer-rest-params\n            return theFunc.apply(target, arguments);\n        };\n    }\n\n    // Start creating a new baseFuncs by creating proxies for the instance functions (as they may get replaced)\n    var baseFuncs = objCreate(null);\n    _forEachProp(instFuncs, (name) => {\n        // Create an instance callback for passing the base function to the caller\n        baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);\n    });\n    \n    // Get the base prototype functions\n    var baseProto = _getObjProto(classProto);\n    let visited:any[] = [];\n\n    // Don't include base object functions for Object, Array or Function\n    while (baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto)) {\n        // look for prototype functions\n        _forEachProp(baseProto, (name) => {\n            // Don't include any dynamic prototype instances - as we only want the real functions\n            // For IE 7/8 the prototype lookup doesn't provide the full chain so we need to bypass the \n            // hasOwnProperty check we get all of the methods, main difference is that IE7/8 doesn't return\n            // the Object prototype methods while bypassing the check\n            if (!baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf)) {\n                // Create an instance callback for passing the base function to the caller\n                baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name);\n            }\n        });\n\n        // We need to find all possible functions that might be overloaded by walking the entire prototype chain\n        // This avoids the caller from needing to check whether it's direct base class implements the function or not\n        // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\n        visited.push(baseProto);\n        baseProto = _getObjProto(baseProto);\n    }\n\n    return baseFuncs;\n}\n\nfunction _getInstFunc(target: any, funcName: string, proto: any, currentDynProtoProxy: any) {\n    let instFunc = null;\n\n    // We need to check whether the class name is defined directly on this prototype otherwise\n    // it will walk the proto chain and return any parent proto classname.\n    if (target && objHasOwnProperty(proto, DynClassName)) {\n\n        let instFuncTable = target[DynInstFuncTable] || objCreate(null);\n        instFunc = (instFuncTable[proto[DynClassName]] || objCreate(null))[funcName];\n\n        if (!instFunc) {\n            // Avoid stack overflow from recursive calling the same function\n            _throwTypeError(\"Missing [\" + funcName + \"] \" + strFunction);\n        }\n\n        // We have the instance function, lets check it we can speed up further calls\n        // by adding the instance function back directly on the instance (avoiding the dynamic func lookup)\n        if (!instFunc[DynInstChkTag] && instFuncTable[DynAllowInstChkTag] !== false) {\n            // If the instance already has an instance function we can't replace it\n            let canAddInst = !objHasOwnProperty(target, funcName);\n\n            // Get current prototype\n            let objProto = _getObjProto(target);\n            let visited:any[] = [];\n\n            // Lookup the function starting at the top (instance level prototype) and traverse down, if the first matching function\n            // if nothing is found or if the first hit is a dynamic proto instance then we can safely add an instance shortcut\n            while (canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto)) {\n                let protoFunc = objProto[funcName];\n                if (protoFunc) {\n                    canAddInst = (protoFunc === currentDynProtoProxy);\n                    break;\n                }\n\n                // We need to find all possible initial functions to ensure that we don't bypass a valid override function\n                visited.push(objProto);\n                objProto = _getObjProto(objProto);\n            }\n\n            try {\n                if (canAddInst) {\n                    // This instance doesn't have an instance func and the class hierarchy does have a higher level prototype version\n                    // so it's safe to directly assign for any subsequent calls (for better performance)\n                    target[funcName] = instFunc;\n                }\n\n                // Block further attempts to set the instance function for any\n                instFunc[DynInstChkTag] = 1;\n            } catch (e) {\n                // Don't crash if the object is readonly or the runtime doesn't allow changing this\n                // And set a flag so we don't try again for any function\n                instFuncTable[DynAllowInstChkTag] = false;\n            }\n        }\n    }\n\n    return instFunc;\n}\n\nfunction _getProtoFunc(funcName: string, proto: any, currentDynProtoProxy: any) {\n    let protoFunc = proto[funcName];\n\n    // Check that the prototype function is not a self reference -- try to avoid stack overflow!\n    if (protoFunc === currentDynProtoProxy) {\n        // It is so lookup the base prototype\n        protoFunc = _getObjProto(proto)[funcName];\n    }\n\n    if (typeof protoFunc !== strFunction) {\n        _throwTypeError(\"[\" + funcName + \"] is not a \" + strFunction);\n    }\n\n    return protoFunc;\n}\n\n/**\n * Add the required dynamic prototype methods to the the class prototype\n * @param proto - The class prototype\n * @param className - The instance classname \n * @param target - The target instance\n * @param baseInstFuncs - The base instance functions\n * @param setInstanceFunc - Flag to allow prototype function to reset the instance function if one does not exist\n * @ignore\n */\nfunction _populatePrototype(proto:any, className:string, target:any, baseInstFuncs:any, setInstanceFunc:boolean) {\n    function _createDynamicPrototype(proto:any, funcName:string) {\n        let dynProtoProxy = function() {\n            // Use the instance or prototype function\n            let instFunc = _getInstFunc(this, funcName, proto, dynProtoProxy) || _getProtoFunc(funcName, proto, dynProtoProxy);\n            // eslint-disable-next-line prefer-rest-params\n            return instFunc.apply(this, arguments);\n        };\n        \n        // Tag this function as a proxy to support replacing dynamic proxy elements (primary use case is for unit testing\n        // via which can dynamically replace the prototype function reference)\n        try {\n            (dynProtoProxy as any)[DynProxyTag] = 1;\n        } catch (e) {\n            // Ignore errors in restricted environments like Cloudflare Workers\n        }\n        return dynProtoProxy;\n    }\n    \n    if (!_isObjectOrArrayPrototype(proto)) {\n        let instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || objCreate(null);\n        if (!_isObjectOrArrayPrototype(instFuncTable)) {\n            let instFuncs = instFuncTable[className] = (instFuncTable[className] || objCreate(null)); // fetch and assign if as it may not exist yet\n\n            // Set whether we are allow to lookup instances, if someone has set to false then do not re-enable\n            if (instFuncTable[DynAllowInstChkTag] !== false) {\n                instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc;\n            }\n\n            if (!_isObjectOrArrayPrototype(instFuncs)) {\n                _forEachProp(target, (name) => {\n                    // Only add overridden functions\n                    if (_isDynamicCandidate(target, name, false) && target[name] !== baseInstFuncs[name] ) {\n                        // Save the instance Function to the lookup table and remove it from the instance as it's not a dynamic proto function\n                        instFuncs[name] = target[name];\n                        try {\n                            delete target[name];\n                        } catch (e) {\n                            // Ignore errors in restricted environments like Cloudflare Workers\n                        }\n                        \n                        // Add a dynamic proto if one doesn't exist or if a prototype function exists and it's not a dynamic one\n                        if (!objHasOwnProperty(proto, name) || (proto[name] && !proto[name][DynProxyTag])) {\n                            proto[name] = _createDynamicPrototype(proto, name);\n                        }\n                    }\n                });\n            }\n        }\n    }\n}\n\n/**\n * Checks whether the passed prototype object appears to be correct by walking the prototype hierarchy of the instance\n * @param classProto The class prototype instance\n * @param thisTarget The current instance that will be checked whether the passed prototype instance is in the hierarchy\n * @ignore\n */\nfunction _checkPrototype(classProto:any, thisTarget:any) {\n    // This method doesn't existing in older browsers (e.g. IE8)\n    if (_objGetPrototypeOf) {\n        // As this is primarily a coding time check, don't bother checking if running in IE8 or lower\n        let visited:any[] = [];\n        let thisProto = _getObjProto(thisTarget);\n        while (thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto)) {\n            if (thisProto === classProto) {\n                return true;\n            }\n\n            // This avoids the caller from needing to check whether it's direct base class implements the function or not\n            // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\n            visited.push(thisProto);\n            thisProto = _getObjProto(thisProto);\n        }\n\n        return false;\n    }\n\n    // If objGetPrototypeOf doesn't exist then just assume everything is ok.\n    return true;\n}\n\n/**\n * Gets the current prototype name using the ES6 name if available otherwise falling back to a use unknown as the name.\n * It's not critical for this to return a name, it's used to decorate the generated unique name for easier debugging only.\n * @param target \n * @param unknownValue \n * @ignore\n */\nfunction _getObjName(target:any, unknownValue?:string) {\n    if (objHasOwnProperty(target, Prototype)) {\n        // Look like a prototype\n        return target.name || unknownValue || UnknownValue\n    }\n\n    return (((target || {})[Constructor]) || {}).name || unknownValue || UnknownValue;\n}\n\n/**\n * Interface to define additional configuration options to control how the dynamic prototype functions operate.\n */\nexport interface IDynamicProtoOpts {\n\n    /**\n     * Should the dynamic prototype attempt to set an instance function for instances that do not already have an\n     * function of the same name or have been extended by a class with a (non-dynamic proto) prototype function.\n     */\n    setInstFuncs: boolean,\n\n    /**\n     * When looking for base (super) functions if it finds a dynamic proto instances can it use the instance functions\n     * and bypass the prototype lookups. Defaults to true.\n     */\n    useBaseInst?: boolean\n}\n\n/**\n * The delegate signature for the function used as the callback for dynamicProto() \n * @typeparam DPType This is the generic type of the class, used to keep intellisense valid for the proxy instance, even \n * though it is only a proxy that only contains the functions \n * @param theTarget This is the real \"this\" of the current target object\n * @param baseFuncProxy The is a proxy object which ONLY contains this function that existed on the \"this\" instance before\n * calling dynamicProto, it does NOT contain properties of this. This is basically equivalent to using the \"super\" keyword.\n */\nexport type DynamicProtoDelegate<DPType> = (theTarget:DPType, baseFuncProxy?:DPType) => void;\n\n/**\n * Helper function when creating dynamic (inline) functions for classes, this helper performs the following tasks :-\n * - Saves references to all defined base class functions\n * - Calls the delegateFunc with the current target (this) and a base object reference that can be used to call all \"super\" functions.\n * - Will populate the class prototype for all overridden functions to support class extension that call the prototype instance.\n * Callers should use this helper when declaring all function within the constructor of a class, as mentioned above the delegateFunc is \n * passed both the target \"this\" and an object that can be used to call any base (super) functions, using this based object in place of\n * super.XXX() (which gets expanded to _super.prototype.XXX()) provides a better minification outcome and also ensures the correct \"this\"\n * context is maintained as TypeScript creates incorrect references using super.XXXX() for dynamically defined functions i.e. Functions\n * defined in the constructor or some other function (rather than declared as complete typescript functions).\n * ### Usage\n * ```typescript\n * import dynamicProto from \"@microsoft/dynamicproto-js\";\n * class ExampleClass extends BaseClass {\n *     constructor() {\n *         dynamicProto(ExampleClass, this, (_self, base) => {\n *             // This will define a function that will be converted to a prototype function\n *             _self.newFunc = () => {\n *                 // Access any \"this\" instance property  \n *                 if (_self.someProperty) {\n *                     ...\n *                 }\n *             }\n *             // This will define a function that will be converted to a prototype function\n *             _self.myFunction = () => {\n *                 // Access any \"this\" instance property\n *                 if (_self.someProperty) {\n *                     // Call the base version of the function that we are overriding\n *                     base.myFunction();\n *                 }\n *                 ...\n *             }\n *             _self.initialize = () => {\n *                 ...\n *             }\n *             // Warnings: While the following will work as _self is simply a reference to\n *             // this, if anyone overrides myFunction() the overridden will be called first\n *             // as the normal JavaScript method resolution will occur and the defined\n *             // _self.initialize() function is actually gets removed from the instance and\n *             // a proxy prototype version is created to reference the created method.\n *             _self.initialize();\n *         });\n *     }\n * }\n * ```\n * @typeparam DPType This is the generic type of the class, used to keep intellisense valid\n * @typeparam DPCls The type that contains the prototype of the current class\n * @param theClass - This is the current class instance which contains the prototype for the current class\n * @param target - The current \"this\" (target) reference, when the class has been extended this.prototype will not be the 'theClass' value.\n * @param delegateFunc - The callback function (closure) that will create the dynamic function\n * @param options - Additional options to configure how the dynamic prototype operates\n */\nexport default function dynamicProto<DPType, DPCls>(theClass:DPCls, target:DPType, delegateFunc: DynamicProtoDelegate<DPType>, options?:IDynamicProtoOpts): void {\n    // Make sure that the passed theClass argument looks correct\n    if (!objHasOwnProperty(theClass, Prototype)) {\n        _throwTypeError(\"theClass is an invalid class definition.\");\n    }\n\n    // Quick check to make sure that the passed theClass argument looks correct (this is a common copy/paste error)\n    let classProto = theClass[Prototype];\n    if (!_checkPrototype(classProto, target)) {\n        _throwTypeError(\"[\" + _getObjName(theClass) + \"] not in hierarchy of [\" + _getObjName(target) + \"]\");\n    }\n\n    let className = null;\n    if (objHasOwnProperty(classProto, DynClassName)) {\n        // Only grab the class name if it's defined on this prototype (i.e. don't walk the prototype chain)\n        className = classProto[DynClassName];\n    } else {\n        // As not all browser support name on the prototype creating a unique dynamic one if we have not already\n        // assigned one, so we can use a simple string as the lookup rather than an object for the dynamic instance\n        // function table lookup.\n        className = DynClassNamePrefix + _getObjName(theClass, \"_\") + \"$\" + _gblInst.n ;\n        _gblInst.n++;\n        try {\n            classProto[DynClassName] = className;\n        } catch (e) {\n            // Ignore errors in restricted environments like Cloudflare Workers\n        }\n    }\n\n    let perfOptions = dynamicProto[DynProtoDefaultOptions];\n    let useBaseInst = !!perfOptions[strUseBaseInst];\n    if (useBaseInst && options && options[strUseBaseInst] !== undefined) {\n        useBaseInst = !!options[strUseBaseInst];\n    }\n\n    // Get the current instance functions\n    let instFuncs = _getInstanceFuncs(target);\n\n    // Get all of the functions for any base instance (before they are potentially overridden)\n    let baseFuncs = _getBaseFuncs(classProto, target, instFuncs, useBaseInst);\n\n    // Execute the delegate passing in both the current target \"this\" and \"base\" function references\n    // Note casting the same type as we don't actually have the base class here and this will provide some intellisense support\n    delegateFunc(target, baseFuncs as DPType);\n\n    // Don't allow setting instance functions in older browsers or restricted environments\n    let setInstanceFunc = !!_objGetPrototypeOf && !!perfOptions[strSetInstFuncs] && !_isRestrictedEnvironment();\n    if (setInstanceFunc && options) {\n        setInstanceFunc = !!options[strSetInstFuncs];\n    }\n\n    // Populate the Prototype for any overridden instance functions\n    _populatePrototype(classProto, className, target, instFuncs, setInstanceFunc !== false);\n}\n\n/**\n * Exposes the default global options to allow global configuration, if the global values are disabled these will override\n * any passed values. This is primarily exposed to support unit-testing without the need for individual classes to expose\n * their internal usage of dynamic proto.\n */\ndynamicProto[DynProtoDefaultOptions] = _gblInst.o;\n","/// <reference path=\"./TestFramework/Common.ts\" />\n\nimport dynamicProto from \"../src/DynamicProto\";\n\ninterface IInheritTest {\n    executionOrder:string[];\n    testFunction?(): void;\n}\n\nclass InheritTest1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    constructor() {\n        this.executionOrder.push(\"InheritTest1()\");\n    }\n\n    public testFunction() {\n        this.executionOrder.push(\"InheritTest1.test()\");\n    }\n}\n\nclass InheritTest2 extends InheritTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest2()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest2.test()\");\n    }\n}\n\nclass InheritTest3 extends InheritTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest3()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest3.test()\");\n    }\n}\n\nclass DynInheritTest1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    public testFunction?(): void;\n\n    constructor() {\n        this.executionOrder.push(\"DynInheritTest1()\");\n        dynamicProto(DynInheritTest1, this, (_self, base) => {\n            _self.testFunction = () => {\n                this.executionOrder.push(\"DynInheritTest1.test()\");\n            }\n        });\n    }\n}\n\nclass InheritTest4 extends DynInheritTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest4()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest4.test()\");\n    }\n}\n\nclass InheritTest5 extends InheritTest4 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest5()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest5.test()\");\n    }\n}\n\nclass DynInheritTest2 extends InheritTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest2()\");\n        dynamicProto(DynInheritTest2, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest2.test()\");\n            }\n        });\n    }\n}\n\nclass DynInheritTest3 extends DynInheritTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest3()\");\n        dynamicProto(DynInheritTest3, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest3.test()\");\n            }\n        });\n    }\n}\n\nclass InheritTest6 extends DynInheritTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest6()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest6.test()\");\n    }\n}\n\nclass DynInheritTest4 extends InheritTest6 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest4()\");\n        dynamicProto(DynInheritTest4, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest4.test()\");\n            }\n        });\n    }\n}\n\nclass DynInheritTest5 extends DynInheritTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest5()\");\n        dynamicProto(DynInheritTest5, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest5.test()\");\n            }\n        });\n    }\n}\n\nclass DynInheritTest6 extends DynInheritTest5 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest6()\");\n        dynamicProto(DynInheritTest6, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest6.test()\");\n            }\n        });\n    }\n}\n\nclass InstInherit1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    public testFunction?():void;\n\n    constructor() {\n        this.executionOrder.push(\"InstInherit1()\");\n\n        this.testFunction = () => {\n            this.executionOrder.push(\"InstInherit1.test()\");\n        }\n    }\n}\n\nclass InstInherit2 extends InheritTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InstInherit2()\");\n\n        this.testFunction = () => {\n            super.testFunction();\n            this.executionOrder.push(\"InstInherit2.test()\");\n        }\n    }\n}\n\nclass InheritTest7 extends InstInherit1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest7()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest7.test()\");\n    }\n}\n\nclass DynInheritTest7 extends InstInherit1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest7()\");\n        dynamicProto(DynInheritTest7, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest7.test()\");\n            }\n        });\n    }\n}\n\nclass InstInherit3 extends DynInheritTest7 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InstInherit3()\");\n\n        this.testFunction = () => {\n            super.testFunction();\n            this.executionOrder.push(\"InstInherit3.test()\");\n        }\n    }\n}\n\nclass DynInheritTest8 extends InstInherit3 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest8()\");\n        dynamicProto(DynInheritTest8, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest8.test()\");\n            }\n        });\n    }\n}\n\nclass BadInstInherit1 extends InstInherit1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"BadInstInherit1()\");\n\n        this.testFunction = () => {\n            try {\n                super.testFunction();\n            } catch (e) {\n                this.executionOrder.push(\"BadInstInherit1.throw()\");\n            }\n            this.executionOrder.push(\"BadInstInherit1.test()\");\n        }\n    }\n}\n\nclass DynInheritTest9 extends BadInstInherit1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest9()\");\n        dynamicProto(DynInheritTest9, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest9.test()\");\n            }\n        });\n    }\n}\n\nclass GoodInstInherit1 extends InstInherit1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"GoodInstInherit1()\");\n\n        let prevTestFunc = this.testFunction;\n        this.testFunction = () => {\n            prevTestFunc.call(this);\n            this.executionOrder.push(\"GoodInstInherit1.test()\");\n        }\n    }\n}\n\nclass DynInheritTest10 extends GoodInstInherit1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest10()\");\n        dynamicProto(DynInheritTest10, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest10.test()\");\n            }\n        });\n    }\n}\n\nclass GoodInstInherit2 extends DynInheritTest10 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"GoodInstInherit2()\");\n\n        let prevTestFunc = this.testFunction;\n        this.testFunction = () => {\n            prevTestFunc.call(this);\n            this.executionOrder.push(\"GoodInstInherit2.test()\");\n        }\n    }\n}\n\nexport class DynamicProtoDefaultTests extends TestClass {\n\n    public testInitialize() {\n    }\n\n    private _validateOrder(message:string, actual:string[], expected:string[]) {\n        QUnit.assert.equal(actual.length, expected.length, message + \": Checking the length\");\n\n        let passed = true;\n        let error = \"\";\n        for (let lp = 0; lp < expected.length; lp++) {\n            if (lp < actual.length) {\n                if (actual[lp] !== expected[lp]) {\n                    passed = false\n                    error += \" **[\" + actual[lp] + \"!=\" + expected[lp] + \"]**;\"\n                } else {\n                    error += \" \" + expected[lp] + \";\";\n                }\n            } else {\n                passed = false;\n                error += \" --[\" + expected[lp] + \"]--;\"\n            }\n        }\n\n        // Fail test and log any extra unexpected calls\n        for (let lp = expected.length; lp < actual.length; lp++) {\n            passed = false;\n            error += \" ++[\" + actual[lp] + \"]++;\"\n        }\n\n        QUnit.assert.ok(passed, message + \":\" + error);\n    }\n\n    private doTest(message:string, theTest:IInheritTest, expectedOrder:string[])\n    {\n        theTest.testFunction();\n        this._validateOrder(message, theTest.executionOrder, expectedOrder);\n    }\n\n    public registerTests() {\n        this.testCase({\n            name: \"Default: Inheritance tests\",\n            test: () => {\n                this.doTest(\"InheritTest1\", new InheritTest1(), [\n                    \"InheritTest1()\", \n                    \"InheritTest1.test()\"\n                ]);\n\n                this.doTest(\"InheritTest2\", new InheritTest2(), [\n                    \"InheritTest1()\", \n                    \"InheritTest2()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\"\n                ]);\n\n                this.doTest(\"InheritTest3\", new InheritTest3(), [\n                    \"InheritTest1()\", \n                    \"InheritTest2()\", \n                    \"InheritTest3()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest3.test()\"\n                ]);\n\n                this.doTest(\"InheritTest4\", new InheritTest4(), [\n                    \"DynInheritTest1()\", \n                    \"InheritTest4()\", \n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\"\n                ]);\n\n                this.doTest(\"InheritTest5\", new InheritTest5(), [\n                    \"DynInheritTest1()\", \n                    \"InheritTest4()\", \n                    \"InheritTest5()\", \n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"InheritTest5.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest1\", new DynInheritTest1(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest1.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest2\", new DynInheritTest2(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest3\", new DynInheritTest3(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"DynInheritTest3()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"DynInheritTest3.test()\"\n                ]);\n\n                this.doTest(\"InheritTest6\", new InheritTest6(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest6()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest4\", new DynInheritTest4(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest6()\", \n                    \"DynInheritTest4()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"DynInheritTest4.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest5\", new DynInheritTest5(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest5()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest6\", new DynInheritTest6(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest5()\", \n                    \"DynInheritTest6()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest6.test()\"\n                ]);\n\n\n                this.doTest(\"InstInherit1\", new InstInherit1(), [\n                    \"InstInherit1()\", \n                    \"InstInherit1.test()\"\n                ]);\n\n                this.doTest(\"InstInherit2\", new InstInherit2(), [\n                    \"InheritTest1()\",\n                    \"InheritTest2()\", \n                    \"InstInherit2()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InstInherit2.test()\"\n                ]);\n\n                // NOTE: Notice that InheritTest7.test() was not called -- this is because TS doesn't handle this\n                this.doTest(\"InheritTest7\", new InheritTest7(), [\n                    \"InstInherit1()\",\n                    \"InheritTest7()\", \n                    \"InstInherit1.test()\"\n                ]);\n\n                // NOTE: Notice that DynInheritTest7.test() IS called -- this is because dynamicProto handles this scenario\n                this.doTest(\"DynInheritTest7\", new DynInheritTest7(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\"\n                ]);\n\n                this.doTest(\"InstInherit3\", new InstInherit3(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit3()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\"\n                ]);\n                \n                this.doTest(\"DynInheritTest8\", new DynInheritTest8(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit3()\", \n                    \"DynInheritTest8()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"DynInheritTest8.test()\"\n                ]);\n                \n                // Note: Bad inherit as with InheritTest7 fails to call base instance and actually throws in this case\n                this.doTest(\"BadInstInherit1\", new BadInstInherit1(), [\n                    \"InstInherit1()\", \n                    \"BadInstInherit1()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\"\n                ]);\n\n                // Note: dynamicProto doesn't fix broken base classes, but it still calls them in the correct order\n                this.doTest(\"DynInheritTest9\", new DynInheritTest9(), [\n                    \"InstInherit1()\", \n                    \"BadInstInherit1()\",\n                    \"DynInheritTest9()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"DynInheritTest9.test()\"\n                ]);\n\n                this.doTest(\"GoodInstInherit1\", new GoodInstInherit1(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\", \n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest10\", new DynInheritTest10(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\",\n                    \"DynInheritTest10()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\"\n                ]);\n\n                this.doTest(\"GoodInstInherit2\", new GoodInstInherit2(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\",\n                    \"DynInheritTest10()\",\n                    \"GoodInstInherit2()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"GoodInstInherit2.test()\",\n                ]);\n            }\n        });\n    }\n}\n","/// <reference path=\"./TestFramework/Common.ts\" />\n\nimport dynamicProto from \"../src/DynamicProto\";\n\ninterface IInheritTest {\n    executionOrder:string[];\n    testFunction?(): void;\n}\n\nclass InheritMultipleCallTest1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    constructor() {\n        this.executionOrder.push(\"InheritTest1()\");\n    }\n\n    public testFunction() {\n        this.executionOrder.push(\"InheritTest1.test()\");\n    }\n}\n\nclass InheritMultipleCallTest2 extends InheritMultipleCallTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest2()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest2.test()\");\n    }\n}\n\nclass InheritMultipleCallTest3 extends InheritMultipleCallTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest3()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest3.test()\");\n    }\n}\n\nclass DynInheritMultipleCallTest1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    public testFunction?(): void;\n\n    constructor() {\n        this.executionOrder.push(\"DynInheritTest1()\");\n        dynamicProto(DynInheritMultipleCallTest1, this, (_self, base) => {\n            _self.testFunction = () => {\n                this.executionOrder.push(\"DynInheritTest1.test()\");\n            }\n        });\n    }\n}\n\nclass InheritMultipleCallTest4 extends DynInheritMultipleCallTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest4()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest4.test()\");\n    }\n}\n\nclass InheritMultipleCallTest5 extends InheritMultipleCallTest4 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest5()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest5.test()\");\n    }\n}\n\nclass DynInheritMultipleCallTest2 extends InheritMultipleCallTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest2()\");\n        dynamicProto(DynInheritMultipleCallTest2, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest2.test()\");\n            }\n        });\n    }\n}\n\nclass DynInheritMultipleCallTest3 extends DynInheritMultipleCallTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest3()\");\n        dynamicProto(DynInheritMultipleCallTest3, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest3.test()\");\n            }\n        });\n    }\n}\n\nclass InheritMultipleCallTest6 extends DynInheritMultipleCallTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest6()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest6.test()\");\n    }\n}\n\nclass DynInheritMultipleCallTest4 extends InheritMultipleCallTest6 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest4()\");\n        dynamicProto(DynInheritMultipleCallTest4, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest4.test()\");\n            }\n        });\n    }\n}\n\nclass DynInheritMultipleCallTest5 extends DynInheritMultipleCallTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest5()\");\n        dynamicProto(DynInheritMultipleCallTest5, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest5.test()\");\n            }\n        });\n    }\n}\n\nclass DynInheritMultipleCallTest6 extends DynInheritMultipleCallTest5 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest6()\");\n        dynamicProto(DynInheritMultipleCallTest6, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest6.test()\");\n            }\n        });\n    }\n}\n\nclass InstInheritMultipleCall1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    public testFunction?():void;\n\n    constructor() {\n        this.executionOrder.push(\"InstInherit1()\");\n\n        this.testFunction = () => {\n            this.executionOrder.push(\"InstInherit1.test()\");\n        }\n    }\n}\n\nclass InstInheritMultipleCall2 extends InheritMultipleCallTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InstInherit2()\");\n\n        this.testFunction = () => {\n            super.testFunction();\n            this.executionOrder.push(\"InstInherit2.test()\");\n        }\n    }\n}\n\nclass InheritMultipleCallTest7 extends InstInheritMultipleCall1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest7()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest7.test()\");\n    }\n}\n\nclass DynInheritMultipleCallTest7 extends InstInheritMultipleCall1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest7()\");\n        dynamicProto(DynInheritMultipleCallTest7, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest7.test()\");\n            }\n        });\n    }\n}\n\nclass InstInheritMultipleCall3 extends DynInheritMultipleCallTest7 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InstInherit3()\");\n\n        this.testFunction = () => {\n            super.testFunction();\n            this.executionOrder.push(\"InstInherit3.test()\");\n        }\n    }\n}\n\nclass DynInheritMultipleCallTest8 extends InstInheritMultipleCall3 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest8()\");\n        dynamicProto(DynInheritMultipleCallTest8, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest8.test()\");\n            }\n        });\n    }\n}\n\nclass BadInstInheritMultipleCall1 extends InstInheritMultipleCall1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"BadInstInherit1()\");\n\n        this.testFunction = () => {\n            try {\n                super.testFunction();\n            } catch (e) {\n                this.executionOrder.push(\"BadInstInherit1.throw()\");\n            }\n            this.executionOrder.push(\"BadInstInherit1.test()\");\n        }\n    }\n}\n\nclass DynInheritTestMultipleCall9 extends BadInstInheritMultipleCall1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest9()\");\n        dynamicProto(DynInheritTestMultipleCall9, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest9.test()\");\n            }\n        });\n    }\n}\n\nclass GoodInstInheritMultipleCall1 extends InstInheritMultipleCall1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"GoodInstInherit1()\");\n\n        let prevTestFunc = this.testFunction;\n        this.testFunction = () => {\n            prevTestFunc.call(this);\n            this.executionOrder.push(\"GoodInstInherit1.test()\");\n        }\n    }\n}\n\nclass DynInheritTestMultipleCall10 extends GoodInstInheritMultipleCall1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest10()\");\n        dynamicProto(DynInheritTestMultipleCall10, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest10.test()\");\n            }\n        });\n    }\n}\n\nclass GoodInstInheritMultipleCall2 extends DynInheritTestMultipleCall10 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"GoodInstInherit2()\");\n\n        let prevTestFunc = this.testFunction;\n        this.testFunction = () => {\n            prevTestFunc.call(this);\n            this.executionOrder.push(\"GoodInstInherit2.test()\");\n        }\n    }\n}\n\nexport class DynamicProtoMultipleCallTests extends TestClass {\n\n    public testInitialize() {\n    }\n\n    private _validateOrder(message:string, actual:string[], expected:string[]) {\n        QUnit.assert.equal(actual.length, expected.length, message + \": Checking the length\");\n\n        let passed = true;\n        let error = \"\";\n        for (let lp = 0; lp < expected.length; lp++) {\n            if (lp < actual.length) {\n                if (actual[lp] !== expected[lp]) {\n                    passed = false\n                    error += \" **[\" + actual[lp] + \"!=\" + expected[lp] + \"]**;\"\n                } else {\n                    error += \" \" + expected[lp] + \";\";\n                }\n            } else {\n                passed = false;\n                error += \" --[\" + expected[lp] + \"]--;\"\n            }\n        }\n\n        // Fail test and log any extra unexpected calls\n        for (let lp = expected.length; lp < actual.length; lp++) {\n            passed = false;\n            error += \" ++[\" + actual[lp] + \"]++;\"\n        }\n\n        QUnit.assert.ok(passed, message + \":\" + error);\n    }\n\n    private doTest(message:string, theTest:IInheritTest, expectedOrder:string[])\n    {\n        theTest.testFunction();\n        theTest.testFunction();\n        theTest.testFunction();\n        this._validateOrder(message, theTest.executionOrder, expectedOrder);\n    }\n\n    public registerTests() {\n        this.testCase({\n            name: \"MultipleCall: Inheritance tests\",\n            test: () => {\n                this.doTest(\"InheritTest1\", new InheritMultipleCallTest1(), [\n                    \"InheritTest1()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest1.test()\"\n                ]);\n\n                this.doTest(\"InheritTest2\", new InheritMultipleCallTest2(), [\n                    \"InheritTest1()\", \n                    \"InheritTest2()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\"\n                ]);\n\n                this.doTest(\"InheritTest3\", new InheritMultipleCallTest3(), [\n                    \"InheritTest1()\", \n                    \"InheritTest2()\", \n                    \"InheritTest3()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest3.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest3.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest3.test()\"\n                ]);\n\n                this.doTest(\"InheritTest4\", new InheritMultipleCallTest4(), [\n                    \"DynInheritTest1()\", \n                    \"InheritTest4()\", \n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\"\n                ]);\n\n                this.doTest(\"InheritTest5\", new InheritMultipleCallTest5(), [\n                    \"DynInheritTest1()\", \n                    \"InheritTest4()\", \n                    \"InheritTest5()\", \n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"InheritTest5.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"InheritTest5.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"InheritTest5.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest1\", new DynInheritMultipleCallTest1(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest1.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest2\", new DynInheritMultipleCallTest2(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest3\", new DynInheritMultipleCallTest3(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"DynInheritTest3()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"DynInheritTest3.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"DynInheritTest3.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"DynInheritTest3.test()\"\n                ]);\n\n                this.doTest(\"InheritTest6\", new InheritMultipleCallTest6(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest6()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest4\", new DynInheritMultipleCallTest4(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest6()\", \n                    \"DynInheritTest4()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"DynInheritTest4.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"DynInheritTest4.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"DynInheritTest4.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest5\", new DynInheritMultipleCallTest5(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest5()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest6\", new DynInheritMultipleCallTest6(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest5()\", \n                    \"DynInheritTest6()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest6.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest6.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest6.test()\"\n                ]);\n\n\n                this.doTest(\"InstInherit1\", new InstInheritMultipleCall1(), [\n                    \"InstInherit1()\", \n                    \"InstInherit1.test()\",\n                    \"InstInherit1.test()\",\n                    \"InstInherit1.test()\"\n                ]);\n\n                this.doTest(\"InstInherit2\", new InstInheritMultipleCall2(), [\n                    \"InheritTest1()\",\n                    \"InheritTest2()\", \n                    \"InstInherit2()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InstInherit2.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InstInherit2.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InstInherit2.test()\"\n                ]);\n\n                // NOTE: Notice that InheritTest7.test() was not called -- this is because TS doesn't handle this\n                this.doTest(\"InheritTest7\", new InheritMultipleCallTest7(), [\n                    \"InstInherit1()\",\n                    \"InheritTest7()\", \n                    \"InstInherit1.test()\",\n                    \"InstInherit1.test()\",\n                    \"InstInherit1.test()\"\n                ]);\n\n                // NOTE: Notice that DynInheritTest7.test() IS called -- this is because dynamicProto handles this scenario\n                this.doTest(\"DynInheritTest7\", new DynInheritMultipleCallTest7(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\"\n                ]);\n\n                this.doTest(\"InstInherit3\", new InstInheritMultipleCall3(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit3()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\"\n                ]);\n                \n                this.doTest(\"DynInheritTest8\", new DynInheritMultipleCallTest8(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit3()\", \n                    \"DynInheritTest8()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"DynInheritTest8.test()\",\n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"DynInheritTest8.test()\",\n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"DynInheritTest8.test()\"\n                ]);\n                \n                // Note: Bad inherit as with InheritTest7 fails to call base instance and actually throws in this case\n                this.doTest(\"BadInstInherit1\", new BadInstInheritMultipleCall1(), [\n                    \"InstInherit1()\", \n                    \"BadInstInherit1()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\"\n                ]);\n\n                // Note: dynamicProto doesn't fix broken base classes, but it still calls them in the correct order\n                this.doTest(\"DynInheritTest9\", new DynInheritTestMultipleCall9(), [\n                    \"InstInherit1()\", \n                    \"BadInstInherit1()\",\n                    \"DynInheritTest9()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"DynInheritTest9.test()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"DynInheritTest9.test()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"DynInheritTest9.test()\"\n                ]);\n\n                this.doTest(\"GoodInstInherit1\", new GoodInstInheritMultipleCall1(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\", \n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest10\", new DynInheritTestMultipleCall10(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\",\n                    \"DynInheritTest10()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\"\n                ]);\n\n                this.doTest(\"GoodInstInherit2\", new GoodInstInheritMultipleCall2(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\",\n                    \"DynInheritTest10()\",\n                    \"GoodInstInherit2()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"GoodInstInherit2.test()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"GoodInstInherit2.test()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"GoodInstInherit2.test()\"\n                ]);\n            }\n        });\n    }\n}\n","/// <reference path=\"./TestFramework/Common.ts\" />\n\nimport dynamicProto from \"../src/DynamicProto\";\n\ninterface IInheritTest {\n    executionOrder:string[];\n    testFunction?(): void;\n}\n\nclass InheritNoInstTest1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    constructor() {\n        this.executionOrder.push(\"InheritTest1()\");\n    }\n\n    public testFunction() {\n        this.executionOrder.push(\"InheritTest1.test()\");\n    }\n}\n\nclass InheritNoInstTest2 extends InheritNoInstTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest2()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest2.test()\");\n    }\n}\n\nclass InheritNoInstTest3 extends InheritNoInstTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest3()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest3.test()\");\n    }\n}\n\nclass DynInheritNoInstTest1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    public testFunction?(): void;\n\n    constructor() {\n        this.executionOrder.push(\"DynInheritTest1()\");\n        dynamicProto(DynInheritNoInstTest1, this, (_self, base) => {\n            _self.testFunction = () => {\n                this.executionOrder.push(\"DynInheritTest1.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass InheritNoInstTest4 extends DynInheritNoInstTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest4()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest4.test()\");\n    }\n}\n\nclass InheritNoInstTest5 extends InheritNoInstTest4 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest5()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest5.test()\");\n    }\n}\n\nclass DynInheritNoInstTest2 extends InheritNoInstTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest2()\");\n        dynamicProto(DynInheritNoInstTest2, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest2.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass DynInheritNoInstTest3 extends DynInheritNoInstTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest3()\");\n        dynamicProto(DynInheritNoInstTest3, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest3.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass InheritNoInstTest6 extends DynInheritNoInstTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest6()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest6.test()\");\n    }\n}\n\nclass DynInheritNoInstTest4 extends InheritNoInstTest6 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest4()\");\n        dynamicProto(DynInheritNoInstTest4, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest4.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass DynInheritNoInstTest5 extends DynInheritNoInstTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest5()\");\n        dynamicProto(DynInheritNoInstTest5, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest5.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass DynInheritNoInstTest6 extends DynInheritNoInstTest5 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest6()\");\n        dynamicProto(DynInheritNoInstTest6, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest6.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass InstInheritNoInst1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    public testFunction?():void;\n\n    constructor() {\n        this.executionOrder.push(\"InstInherit1()\");\n\n        this.testFunction = () => {\n            this.executionOrder.push(\"InstInherit1.test()\");\n        }\n    }\n}\n\nclass InstInheritNoInst2 extends InheritNoInstTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InstInherit2()\");\n\n        this.testFunction = () => {\n            super.testFunction();\n            this.executionOrder.push(\"InstInherit2.test()\");\n        }\n    }\n}\n\nclass InheritNoInstTest7 extends InstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest7()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest7.test()\");\n    }\n}\n\nclass DynInheritNoInstTest7 extends InstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest7()\");\n        dynamicProto(DynInheritNoInstTest7, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest7.test()\");\n            }\n        });\n    }\n}\n\nclass InstInheritNoInst3 extends DynInheritNoInstTest7 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InstInherit3()\");\n\n        this.testFunction = () => {\n            super.testFunction();\n            this.executionOrder.push(\"InstInherit3.test()\");\n        }\n    }\n}\n\nclass DynInheritNoInstTest8 extends InstInheritNoInst3 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest8()\");\n        dynamicProto(DynInheritNoInstTest8, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest8.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass BadInstInheritNoInst1 extends InstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"BadInstInherit1()\");\n\n        this.testFunction = () => {\n            try {\n                super.testFunction();\n            } catch (e) {\n                this.executionOrder.push(\"BadInstInherit1.throw()\");\n            }\n            this.executionOrder.push(\"BadInstInherit1.test()\");\n        }\n    }\n}\n\nclass DynInheritTestNoInst9 extends BadInstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest9()\");\n        dynamicProto(DynInheritTestNoInst9, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest9.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass GoodInstInheritNoInst1 extends InstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"GoodInstInherit1()\");\n\n        let prevTestFunc = this.testFunction;\n        this.testFunction = () => {\n            prevTestFunc.call(this);\n            this.executionOrder.push(\"GoodInstInherit1.test()\");\n        }\n    }\n}\n\nclass DynInheritTestNoInst10 extends GoodInstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest10()\");\n        dynamicProto(DynInheritTestNoInst10, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest10.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass GoodInstInheritNoInst2 extends DynInheritTestNoInst10 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"GoodInstInherit2()\");\n\n        let prevTestFunc = this.testFunction;\n        this.testFunction = () => {\n            prevTestFunc.call(this);\n            this.executionOrder.push(\"GoodInstInherit2.test()\");\n        }\n    }\n}\n\nexport class DynamicProtoNoInstTests extends TestClass {\n\n    public testInitialize() {\n    }\n\n    private _validateOrder(message:string, actual:string[], expected:string[]) {\n        QUnit.assert.equal(actual.length, expected.length, message + \": Checking the length\");\n\n        let passed = true;\n        let error = \"\";\n        for (let lp = 0; lp < expected.length; lp++) {\n            if (lp < actual.length) {\n                if (actual[lp] !== expected[lp]) {\n                    passed = false\n                    error += \" **[\" + actual[lp] + \"!=\" + expected[lp] + \"]**;\"\n                } else {\n                    error += \" \" + expected[lp] + \";\";\n                }\n            } else {\n                passed = false;\n                error += \" --[\" + expected[lp] + \"]--;\"\n            }\n        }\n\n        // Fail test and log any extra unexpected calls\n        for (let lp = expected.length; lp < actual.length; lp++) {\n            passed = false;\n            error += \" ++[\" + actual[lp] + \"]++;\"\n        }\n\n        QUnit.assert.ok(passed, message + \":\" + error);\n    }\n\n    private doTest(message:string, theTest:IInheritTest, expectedOrder:string[])\n    {\n        theTest.testFunction();\n        this._validateOrder(message, theTest.executionOrder, expectedOrder);\n    }\n\n    public registerTests() {\n        this.testCase({\n            name: \"NoInst: Inheritance tests\",\n            test: () => {\n                this.doTest(\"InheritTest1\", new InheritNoInstTest1(), [\n                    \"InheritTest1()\", \n                    \"InheritTest1.test()\"\n                ]);\n\n                this.doTest(\"InheritTest2\", new InheritNoInstTest2(), [\n                    \"InheritTest1()\", \n                    \"InheritTest2()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\"\n                ]);\n\n                this.doTest(\"InheritTest3\", new InheritNoInstTest3(), [\n                    \"InheritTest1()\", \n                    \"InheritTest2()\", \n                    \"InheritTest3()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest3.test()\"\n                ]);\n\n                this.doTest(\"InheritTest4\", new InheritNoInstTest4(), [\n                    \"DynInheritTest1()\", \n                    \"InheritTest4()\", \n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\"\n                ]);\n\n                this.doTest(\"InheritTest5\", new InheritNoInstTest5(), [\n                    \"DynInheritTest1()\", \n                    \"InheritTest4()\", \n                    \"InheritTest5()\", \n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"InheritTest5.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest1\", new DynInheritNoInstTest1(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest1.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest2\", new DynInheritNoInstTest2(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest3\", new DynInheritNoInstTest3(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"DynInheritTest3()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"DynInheritTest3.test()\"\n                ]);\n\n                this.doTest(\"InheritTest6\", new InheritNoInstTest6(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest6()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest4\", new DynInheritNoInstTest4(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest6()\", \n                    \"DynInheritTest4()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"DynInheritTest4.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest5\", new DynInheritNoInstTest5(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest5()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest6\", new DynInheritNoInstTest6(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest5()\", \n                    \"DynInheritTest6()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest6.test()\"\n                ]);\n\n\n                this.doTest(\"InstInherit1\", new InstInheritNoInst1(), [\n                    \"InstInherit1()\", \n                    \"InstInherit1.test()\"\n                ]);\n\n                this.doTest(\"InstInherit2\", new InstInheritNoInst2(), [\n                    \"InheritTest1()\",\n                    \"InheritTest2()\", \n                    \"InstInherit2()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InstInherit2.test()\"\n                ]);\n\n                // NOTE: Notice that InheritTest7.test() was not called -- this is because TS doesn't handle this\n                this.doTest(\"InheritTest7\", new InheritNoInstTest7(), [\n                    \"InstInherit1()\",\n                    \"InheritTest7()\", \n                    \"InstInherit1.test()\"\n                ]);\n\n                // NOTE: Notice that DynInheritTest7.test() IS called -- this is because dynamicProto handles this scenario\n                this.doTest(\"DynInheritTest7\", new DynInheritNoInstTest7(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\"\n                ]);\n\n                this.doTest(\"InstInherit3\", new InstInheritNoInst3(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit3()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\"\n                ]);\n                \n                this.doTest(\"DynInheritTest8\", new DynInheritNoInstTest8(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit3()\", \n                    \"DynInheritTest8()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"DynInheritTest8.test()\"\n                ]);\n                \n                // Note: Bad inherit as with InheritTest7 fails to call base instance and actually throws in this case\n                this.doTest(\"BadInstInherit1\", new BadInstInheritNoInst1(), [\n                    \"InstInherit1()\", \n                    \"BadInstInherit1()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\"\n                ]);\n\n                // Note: dynamicProto doesn't fix broken base classes, but it still calls them in the correct order\n                this.doTest(\"DynInheritTest9\", new DynInheritTestNoInst9(), [\n                    \"InstInherit1()\", \n                    \"BadInstInherit1()\",\n                    \"DynInheritTest9()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"DynInheritTest9.test()\"\n                ]);\n\n                this.doTest(\"GoodInstInherit1\", new GoodInstInheritNoInst1(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\", \n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest10\", new DynInheritTestNoInst10(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\",\n                    \"DynInheritTest10()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\"\n                ]);\n\n                this.doTest(\"GoodInstInherit2\", new GoodInstInheritNoInst2(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\",\n                    \"DynInheritTest10()\",\n                    \"GoodInstInherit2()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"GoodInstInherit2.test()\",\n                ]);\n            }\n        });\n    }\n}\n","/// <reference path=\"./TestFramework/Common.ts\" />\n\nimport dynamicProto from \"../src/DynamicProto\";\n\ninterface IInheritTest {\n    executionOrder:string[];\n    testFunction?(): void;\n}\n\nclass InheritNoInstTest1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    constructor() {\n        this.executionOrder.push(\"InheritTest1()\");\n    }\n\n    public testFunction() {\n        this.executionOrder.push(\"InheritTest1.test()\");\n    }\n}\n\nclass InheritNoInstTest2 extends InheritNoInstTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest2()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest2.test()\");\n    }\n}\n\nclass InheritNoInstTest3 extends InheritNoInstTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest3()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest3.test()\");\n    }\n}\n\nclass DynInheritNoInstTest1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    public testFunction?(): void;\n\n    constructor() {\n        this.executionOrder.push(\"DynInheritTest1()\");\n        dynamicProto(DynInheritNoInstTest1, this, (_self, base) => {\n            _self.testFunction = () => {\n                this.executionOrder.push(\"DynInheritTest1.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass InheritNoInstTest4 extends DynInheritNoInstTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest4()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest4.test()\");\n    }\n}\n\nclass InheritNoInstTest5 extends InheritNoInstTest4 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest5()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest5.test()\");\n    }\n}\n\nclass DynInheritNoInstTest2 extends InheritNoInstTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest2()\");\n        dynamicProto(DynInheritNoInstTest2, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest2.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass DynInheritNoInstTest3 extends DynInheritNoInstTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest3()\");\n        dynamicProto(DynInheritNoInstTest3, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest3.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass InheritNoInstTest6 extends DynInheritNoInstTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest6()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest6.test()\");\n    }\n}\n\nclass DynInheritNoInstTest4 extends InheritNoInstTest6 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest4()\");\n        dynamicProto(DynInheritNoInstTest4, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest4.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass DynInheritNoInstTest5 extends DynInheritNoInstTest1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest5()\");\n        dynamicProto(DynInheritNoInstTest5, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest5.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass DynInheritNoInstTest6 extends DynInheritNoInstTest5 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest6()\");\n        dynamicProto(DynInheritNoInstTest6, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest6.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass InstInheritNoInst1 implements IInheritTest {\n    public executionOrder:string[] = [];\n\n    public testFunction?():void;\n\n    constructor() {\n        this.executionOrder.push(\"InstInherit1()\");\n\n        this.testFunction = () => {\n            this.executionOrder.push(\"InstInherit1.test()\");\n        }\n    }\n}\n\nclass InstInheritNoInst2 extends InheritNoInstTest2 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InstInherit2()\");\n\n        this.testFunction = () => {\n            super.testFunction();\n            this.executionOrder.push(\"InstInherit2.test()\");\n        }\n    }\n}\n\nclass InheritNoInstTest7 extends InstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InheritTest7()\");\n    }\n\n    public testFunction() {\n        super.testFunction();\n        this.executionOrder.push(\"InheritTest7.test()\");\n    }\n}\n\nclass DynInheritNoInstTest7 extends InstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest7()\");\n        dynamicProto(DynInheritNoInstTest7, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest7.test()\");\n            }\n        });\n    }\n}\n\nclass InstInheritNoInst3 extends DynInheritNoInstTest7 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"InstInherit3()\");\n\n        this.testFunction = () => {\n            super.testFunction();\n            this.executionOrder.push(\"InstInherit3.test()\");\n        }\n    }\n}\n\nclass DynInheritNoInstTest8 extends InstInheritNoInst3 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest8()\");\n        dynamicProto(DynInheritNoInstTest8, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest8.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass BadInstInheritNoInst1 extends InstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"BadInstInherit1()\");\n\n        this.testFunction = () => {\n            try {\n                super.testFunction();\n            } catch (e) {\n                this.executionOrder.push(\"BadInstInherit1.throw()\");\n            }\n            this.executionOrder.push(\"BadInstInherit1.test()\");\n        }\n    }\n}\n\nclass DynInheritTestNoInst9 extends BadInstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest9()\");\n        dynamicProto(DynInheritTestNoInst9, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest9.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass GoodInstInheritNoInst1 extends InstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"GoodInstInherit1()\");\n\n        let prevTestFunc = this.testFunction;\n        this.testFunction = () => {\n            prevTestFunc.call(this);\n            this.executionOrder.push(\"GoodInstInherit1.test()\");\n        }\n    }\n}\n\nclass DynInheritTestNoInst10 extends GoodInstInheritNoInst1 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"DynInheritTest10()\");\n        dynamicProto(DynInheritTestNoInst10, this, (_self, base) => {\n            _self.testFunction = () => {\n                base.testFunction();\n                this.executionOrder.push(\"DynInheritTest10.test()\");\n            }\n        }, { setInstFuncs: false });\n    }\n}\n\nclass GoodInstInheritNoInst2 extends DynInheritTestNoInst10 {\n    constructor() {\n        super();\n        this.executionOrder.push(\"GoodInstInherit2()\");\n\n        let prevTestFunc = this.testFunction;\n        this.testFunction = () => {\n            prevTestFunc.call(this);\n            this.executionOrder.push(\"GoodInstInherit2.test()\");\n        }\n    }\n}\n\nexport class DynamicProtoMultipleNoInstTests extends TestClass {\n\n    public testInitialize() {\n    }\n\n    private _validateOrder(message:string, actual:string[], expected:string[]) {\n        QUnit.assert.equal(actual.length, expected.length, message + \": Checking the length\");\n\n        let passed = true;\n        let error = \"\";\n        for (let lp = 0; lp < expected.length; lp++) {\n            if (lp < actual.length) {\n                if (actual[lp] !== expected[lp]) {\n                    passed = false\n                    error += \" **[\" + actual[lp] + \"!=\" + expected[lp] + \"]**;\"\n                } else {\n                    error += \" \" + expected[lp] + \";\";\n                }\n            } else {\n                passed = false;\n                error += \" --[\" + expected[lp] + \"]--;\"\n            }\n        }\n\n        // Fail test and log any extra unexpected calls\n        for (let lp = expected.length; lp < actual.length; lp++) {\n            passed = false;\n            error += \" ++[\" + actual[lp] + \"]++;\"\n        }\n\n        QUnit.assert.ok(passed, message + \":\" + error);\n    }\n\n    private doTest(message:string, theTest:IInheritTest, expectedOrder:string[])\n    {\n        theTest.testFunction();\n        theTest.testFunction();\n        this._validateOrder(message, theTest.executionOrder, expectedOrder);\n    }\n\n    public registerTests() {\n        this.testCase({\n            name: \"NoInst: Inheritance tests\",\n            test: () => {\n                this.doTest(\"InheritTest1\", new InheritNoInstTest1(), [\n                    \"InheritTest1()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest1.test()\"\n                ]);\n\n                this.doTest(\"InheritTest2\", new InheritNoInstTest2(), [\n                    \"InheritTest1()\", \n                    \"InheritTest2()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\"\n                ]);\n\n                this.doTest(\"InheritTest3\", new InheritNoInstTest3(), [\n                    \"InheritTest1()\", \n                    \"InheritTest2()\", \n                    \"InheritTest3()\", \n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest3.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InheritTest3.test()\"\n                ]);\n\n                this.doTest(\"InheritTest4\", new InheritNoInstTest4(), [\n                    \"DynInheritTest1()\", \n                    \"InheritTest4()\", \n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\"\n                ]);\n\n                this.doTest(\"InheritTest5\", new InheritNoInstTest5(), [\n                    \"DynInheritTest1()\", \n                    \"InheritTest4()\", \n                    \"InheritTest5()\", \n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"InheritTest5.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"InheritTest4.test()\",\n                    \"InheritTest5.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest1\", new DynInheritNoInstTest1(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest1.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest2\", new DynInheritNoInstTest2(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest3\", new DynInheritNoInstTest3(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"DynInheritTest3()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"DynInheritTest3.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"DynInheritTest3.test()\"\n                ]);\n\n                this.doTest(\"InheritTest6\", new InheritNoInstTest6(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest6()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest4\", new DynInheritNoInstTest4(), [\n                    \"InheritTest1()\", \n                    \"DynInheritTest2()\", \n                    \"InheritTest6()\", \n                    \"DynInheritTest4()\", \n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"DynInheritTest4.test()\",\n                    \"InheritTest1.test()\",\n                    \"DynInheritTest2.test()\",\n                    \"InheritTest6.test()\",\n                    \"DynInheritTest4.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest5\", new DynInheritNoInstTest5(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest5()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest6\", new DynInheritNoInstTest6(), [\n                    \"DynInheritTest1()\", \n                    \"DynInheritTest5()\", \n                    \"DynInheritTest6()\", \n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest6.test()\",\n                    \"DynInheritTest1.test()\",\n                    \"DynInheritTest5.test()\",\n                    \"DynInheritTest6.test()\"\n                ]);\n\n\n                this.doTest(\"InstInherit1\", new InstInheritNoInst1(), [\n                    \"InstInherit1()\", \n                    \"InstInherit1.test()\",\n                    \"InstInherit1.test()\"\n                ]);\n\n                this.doTest(\"InstInherit2\", new InstInheritNoInst2(), [\n                    \"InheritTest1()\",\n                    \"InheritTest2()\", \n                    \"InstInherit2()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InstInherit2.test()\",\n                    \"InheritTest1.test()\",\n                    \"InheritTest2.test()\",\n                    \"InstInherit2.test()\"\n                ]);\n\n                // NOTE: Notice that InheritTest7.test() was not called -- this is because TS doesn't handle this\n                this.doTest(\"InheritTest7\", new InheritNoInstTest7(), [\n                    \"InstInherit1()\",\n                    \"InheritTest7()\", \n                    \"InstInherit1.test()\",\n                    \"InstInherit1.test()\"\n                ]);\n\n                // NOTE: Notice that DynInheritTest7.test() IS called -- this is because dynamicProto handles this scenario\n                this.doTest(\"DynInheritTest7\", new DynInheritNoInstTest7(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\"\n                ]);\n\n                this.doTest(\"InstInherit3\", new InstInheritNoInst3(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit3()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\"\n                ]);\n                \n                this.doTest(\"DynInheritTest8\", new DynInheritNoInstTest8(), [\n                    \"InstInherit1()\", \n                    \"DynInheritTest7()\", \n                    \"InstInherit3()\", \n                    \"DynInheritTest8()\", \n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"DynInheritTest8.test()\",\n                    \"InstInherit1.test()\",\n                    \"DynInheritTest7.test()\",\n                    \"InstInherit3.test()\",\n                    \"DynInheritTest8.test()\"\n                ]);\n                \n                // Note: Bad inherit as with InheritTest7 fails to call base instance and actually throws in this case\n                this.doTest(\"BadInstInherit1\", new BadInstInheritNoInst1(), [\n                    \"InstInherit1()\", \n                    \"BadInstInherit1()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\"\n                ]);\n\n                // Note: dynamicProto doesn't fix broken base classes, but it still calls them in the correct order\n                this.doTest(\"DynInheritTest9\", new DynInheritTestNoInst9(), [\n                    \"InstInherit1()\", \n                    \"BadInstInherit1()\",\n                    \"DynInheritTest9()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"DynInheritTest9.test()\",\n                    \"BadInstInherit1.throw()\",\n                    \"BadInstInherit1.test()\",\n                    \"DynInheritTest9.test()\"\n                ]);\n\n                this.doTest(\"GoodInstInherit1\", new GoodInstInheritNoInst1(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\", \n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\"\n                ]);\n\n                this.doTest(\"DynInheritTest10\", new DynInheritTestNoInst10(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\",\n                    \"DynInheritTest10()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\"\n                ]);\n\n                this.doTest(\"GoodInstInherit2\", new GoodInstInheritNoInst2(), [\n                    \"InstInherit1()\", \n                    \"GoodInstInherit1()\",\n                    \"DynInheritTest10()\",\n                    \"GoodInstInherit2()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"GoodInstInherit2.test()\",\n                    \"InstInherit1.test()\",\n                    \"GoodInstInherit1.test()\",\n                    \"DynInheritTest10.test()\",\n                    \"GoodInstInherit2.test()\"\n                ]);\n            }\n        });\n    }\n}\n","/// <reference path=\"./TestFramework/Common.ts\" />\n\nimport { objGetPrototypeOf } from \"@nevware21/ts-utils\";\nimport dynamicProto from \"../src/DynamicProto\";\n\nclass HackClass {\n    public hello: string;\n\n    constructor() {\n        this.hello = \"world\";\n    }\n}\n\n\nclass BadInstClass {\n    public _dynInstFuncs: any = {};\n\n    constructor() {\n        this._dynInstFuncs = Object.prototype;\n    }\n}\n\nclass BadProxyInstClass {\n    public _dynInstFuncs: any = {};\n\n    constructor() {\n        this._dynInstFuncs = new Proxy(this, {\n            get: (target, prop) => {\n                if (typeof prop === \"string\" && prop.startsWith(\"_dynCls\")) {\n                    return Object.prototype;\n                }\n\n                return target[prop];\n            }\n        });\n    }\n}\n\nexport class SecurityCheckTests extends TestClass {\n\n    public testInitialize() {\n    }\n\n    public registerTests() {\n        this.testCase({\n            name: \"Try to update Object.prototype directly\",\n            test: () => {\n                let a: any = {};\n\n                try {\n                    dynamicProto(Object, a, (_self, base) => {\n                        _self._testFunction = () => {\n                            QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                        }\n\n                        _self.__proto__ = {\n                            testHack: true\n                        };\n\n                        _self.prototype = {\n                            testHack2: true\n                        };\n                    });\n\n                    QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                } catch (e) {\n                    QUnit.assert.ok(true, \"Expected an exception to be thrown\");\n                }\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype directly\",\n            test: () => {\n                let a: any = {};\n\n                try {\n                    dynamicProto(Object.prototype, a, (_self, base) => {\n                        _self._testFunction = () => {\n                            QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                        }\n\n                        _self.__proto__ = {\n                            testHack: true\n                        };\n\n                        _self.prototype = {\n                            testHack2: true\n                        };\n                    });\n\n                    QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                } catch (e) {\n                    QUnit.assert.ok(true, \"Expected an exception to be thrown\");\n                }\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n\n        this.testCase({\n            name: \"Try to update Object.prototype directly\",\n            test: () => {\n                let a: any = {};\n\n                try {\n                    dynamicProto(Object, a, (_self, base) => {\n                        _self._testFunction = () => {\n                            QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                        }\n\n                        _self.__proto__ = {\n                            testHack: true\n                        };\n\n                        _self.prototype = {\n                            testHack2: true\n                        };\n                    });\n\n                    QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                } catch (e) {\n                    QUnit.assert.ok(true, \"Expected an exception to be thrown\");\n                }\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype directly with a HackClass instance and __proto__ property\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let self = <any>_self;\n                    self.__proto__ = {\n                        testHack: true\n                    };\n\n                    self.prototype = {\n                        testHack2: true\n                    };\n\n                    self._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype directly with a HackClass instance and __proto__ function\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let self = <any>_self;\n                    self.__proto__ = () => {\n                        testHack: true\n                    };\n\n                    self.prototype = {\n                        testHack2: true\n                    };\n\n                    self._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype directly using defineProperty with a HackClass instance and __proto__ property\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let self = <any>_self;\n                    \n                    Object.defineProperty(self, \"__proto__\", {\n                        value: {\n                            testHack: true\n                        },\n                        configurable: true,\n                        enumerable: true\n                    });\n\n                    self.prototype = {\n                        testHack2: true\n                    };\n\n                    self._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype directly using defineProperty with a HackClass instance and __proto__ function\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let self = <any>_self;\n                    \n                    Object.defineProperty(self, \"__proto__\", {\n                        value: () => {\n                            testHack: true\n                        },\n                        configurable: true,\n                        enumerable: true\n                    });\n\n                    self.prototype = {\n                        testHack2: true\n                    };\n\n                    self._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype using HackClass instance with a __proto__ function\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let self = <any>_self;\n                    \n                    self.__proto__ = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    };\n\n                    self.prototype = {\n                        testHack2: true\n                    };\n\n                    self._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype directly with HackClass and an object instance\",\n            test: () => {\n                let a = {};\n\n                try {\n                    dynamicProto(HackClass, a, (_self, base) => {\n                        let self = <any>_self;\n                        self._testFunction = () => {\n                            QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                        }\n    \n                        self.__proto__ = {\n                            testHack: true\n                        };\n    \n                        self.prototype = {\n                            testHack2: true\n                        };\n                    });\n\n                    QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                } catch (e) {\n                    QUnit.assert.ok(true, \"Expected an exception to be thrown\");\n                    QUnit.assert.ok(e.message.indexOf(\"not in hierarchy\") > -1, \"Expected an exception to be thrown\");\n                }\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n\n        this.testCase({\n            name: \"Try to update Object.prototype indirectly using defineProperty with HackClass and an object instance\",\n            test: () => {\n                let a = {};\n\n                try {\n                    dynamicProto(HackClass, a, (_self, base) => {\n                        let self = <any>_self;\n                        self._testFunction = () => {\n                            QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                        }\n    \n                        Object.defineProperty(self, \"__proto__\", {\n                            value: {\n                                testHack: true\n                            },\n                            configurable: true,\n                            enumerable: true\n                        });\n    \n                        self.prototype = {\n                            testHack2: true\n                        };\n                    });\n                } catch (e) {\n                    QUnit.assert.ok(true, \"Expected an exception to be thrown\");\n                    QUnit.assert.ok(e.message.indexOf(\"not in hierarchy\") > -1, \"Expected an exception to be thrown\");\n                }\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype directly  with evil __proto__ with HackClass and an object instance\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let self = <any>_self;\n                    self._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n\n                    self[\"__proto__['hacked']\"] = {\n                        testHack: true\n                    };\n\n                    self.prototype = {\n                        testHack2: true\n                    };\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n\n        this.testCase({\n            name: \"Try to update Object.prototype indirectly using defineProperty with evil __proto__ with HackClass and an object instance\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let self = <any>_self;\n                    self._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n\n                    Object.defineProperty(self, \"__proto__['hacked']\", {\n                        value: {\n                            testHack: true\n                        },\n                        configurable: true,\n                        enumerable: true\n                    });\n\n                    self.prototype = {\n                        testHack2: true\n                    };\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype directly with a HackClass instance\",\n            test: () => {\n                let a = new HackClass()\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let self = <any>_self;\n                    self._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n\n                    self.__proto__ = {\n                        testHack: true\n                    };\n\n                    self.prototype = {\n                        testHack2: true\n                    };\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype indirectly using defineProperty with a HackClass instance\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let self = <any>_self;\n                    self._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n\n                    Object.defineProperty(self, \"__proto__\", {\n                        value: {\n                            testHack: true\n                        },\n                        configurable: true,\n                        enumerable: true\n                    });\n\n                    self.prototype = {\n                        testHack2: true\n                    };\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype indirectly with a null prototype instance\",\n            test: () => {\n                let a: any = {};\n                let theInstance = Object.create(a);\n\n                try {\n                    dynamicProto(theInstance, a, (_self, base) => {\n                        _self.__proto__ = {\n                            testHack: true\n                        };\n\n                        _self.prototype = {\n                            testHack2: true\n                        };\n\n                        _self._testFunction = () => {\n                            QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                        }\n                    });\n\n                    QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                } catch (e) {\n                    QUnit.assert.ok(true, \"Expected an exception to be thrown\");\n                }\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack2\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype indirectly with an a prototype instance\",\n            test: () => {\n                let a: any = {};\n                let theInstance = Object.create(a);\n                try {\n                    dynamicProto(Object.getPrototypeOf(theInstance), a, (_self, base) => {\n                        _self._testFunction = () => {\n                            QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                        }\n                    });\n\n                    QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                } catch (e) {\n                    QUnit.assert.ok(true, \"Expected an exception to be thrown\");\n                }\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype indirectly by using a proxy to return the Object.prototype as the instance functions\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    _self[\"_dynInstFuncs\"] = new Proxy(_self[\"_dynInstFuncs\"] || {}, {\n                        get: (target, prop) => {\n                            if (typeof prop === \"string\" && prop.startsWith(\"_dynCls\")) {\n                                return Object.prototype;\n                            }\n\n                            return target[prop];\n                        }\n                    });\n\n                    (_self as any)._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n\n        this.testCase({\n            name: \"Try to update Object.prototype indirectly by using a proxy to return the Object.prototype as the instance functions\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let className = _self[\"_dynClass\"];\n                    let classProto = _self[\"_dynInstFuncs\"] = (_self[\"_dynInstFuncs\"] || {});\n\n                    // Change the return class prototype to be Object.prototype\n                    classProto[\"_dynCls\" + className] = Object.prototype;\n\n                    (_self as any)._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype indirectly by using a HackClass and updating the base class prototype\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    try {\n                        objGetPrototypeOf(base).testHack = true;\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    } catch (e) {\n                        QUnit.assert.ok(true, \"Expected an exception to be thrown\");\n                    }\n\n                    (_self as any)._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"testHack\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Array.prototype indirectly by using a proxy to return the Array.prototype as the instance functions\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    _self[\"_dynInstFuncs\"] = new Proxy(_self[\"_dynInstFuncs\"] || {}, {\n                        get: (target, prop) => {\n                            if (typeof prop === \"string\" && prop.startsWith(\"_dynCls\")) {\n                                return Array.prototype;\n                            }\n\n                            return target[prop];\n                        }\n                    });\n\n                    (_self as any)._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Array.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Array.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Array.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Array.prototype indirectly by using a proxy to return the Object.prototype as the instance functions\",\n            test: () => {\n                let a = new HackClass();\n\n                dynamicProto(HackClass, a, (_self, base) => {\n                    let className = _self[\"_dynClass\"];\n                    let classProto = _self[\"_dynInstFuncs\"] = (_self[\"_dynInstFuncs\"] || {});\n\n                    // Change the return class prototype to be Object.prototype\n                    classProto[\"_dynCls\" + className] = Array.prototype;\n\n                    (_self as any)._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Array.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Array.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Array.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype with a BadInstClass instance\",\n            test: () => {\n                let a = new BadInstClass();\n\n                dynamicProto(BadInstClass, a, (_self, base) => {\n\n                    (_self as any)._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_dynInstFuncs\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n        this.testCase({\n            name: \"Try to update Object.prototype with a BadProxyInstClass instance\",\n            test: () => {\n                let a = new BadProxyInstClass();\n\n                dynamicProto(BadProxyInstClass, a, (_self, base) => {\n\n                    (_self as any)._testFunction = () => {\n                        QUnit.assert.fail(\"Should not be able to update Object.prototype\");\n                    }\n                });\n\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_testFunction\"), \"Should not have polluted Object.prototype\");\n                QUnit.assert.ok(!Object.prototype.hasOwnProperty(\"_dynInstFuncs\"), \"Should not have polluted Object.prototype\");\n            }\n        });\n\n    }\n}\n\n","import { DynamicProtoDefaultTests } from '../DynamicProto.Tests';\nimport { DynamicProtoMultipleCallTests } from '../DynamicProtoMultipleCall.Tests';\nimport { DynamicProtoNoInstTests } from '../DynamicProtoNoInst.Tests';\nimport { DynamicProtoMultipleNoInstTests } from '../DynamicProtoMultipleNoInst.Tests';\nimport { SecurityCheckTests } from '../SecurityCheck.Tests';\n\nexport function runTests() {\n    new DynamicProtoDefaultTests(\"Default\").registerTests();\n    new DynamicProtoMultipleCallTests(\"Multiple\").registerTests();\n    new DynamicProtoNoInstTests(\"SetInst\").registerTests();\n    new DynamicProtoMultipleNoInstTests(\"Multiple SetInst\").registerTests();\n    new SecurityCheckTests(\"Security Checks\").registerTests();\n}\n"]}
{"version":3,"file":"dynamicprotorolluptests.js","sourceRoot":"","sources":["../TestFramework/Assert.ts","../TestFramework/TestCase.ts","../TestFramework/TestClass.ts","../TestFramework/Common.ts","../../src/removeDynamic.ts","../DynamicProtoRollup.Tests.ts","DynamicProtoRollupTests.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,+CAA+C;AAE/C;;;;GAIG;AACH;IAAA;IA2IA,CAAC;IA1IE;;;;;;;;;;;OAWG;IACY,gBAAS,GAAvB,UAAwB,QAAa,EAAE,MAAW,EAAE,OAAgB;QAChE,OAAO,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAChD,CAAC;IAEF;;;;;;;;;;;OAWG;IACY,YAAK,GAAnB,UAAoB,QAAa,EAAE,MAAW,EAAE,OAAgB;QAC5D,OAAO,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC5C,CAAC;IAEF;;;;;;;;;;;OAWG;IACY,mBAAY,GAA1B,UAA2B,QAAa,EAAE,MAAW,EAAE,OAAgB;QACnE,OAAO,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAEF;;;;;;;;;;;OAWG;IACY,eAAQ,GAAtB,UAAuB,QAAa,EAAE,MAAW,EAAE,OAAgB;QAC/D,OAAO,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAEa,mBAAY,GAA1B,UAA2B,QAAa,EAAE,MAAW,EAAE,OAAgB;QACnE,OAAO,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAEa,gBAAS,GAAvB,UAAwB,QAAa,EAAE,MAAW,EAAE,OAAgB;QAChE,OAAO,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAChD,CAAC;IAEF;;;;;;;;;;;OAWG;IACY,qBAAc,GAA5B,UAA6B,QAAa,EAAE,MAAW,EAAE,OAAgB;QACrE,OAAO,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAEF;;;;;;;;;;OAUG;IACY,SAAE,GAAhB,UAAiB,KAAU,EAAE,OAAgB;QACzC,OAAO,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC9B,CAAC;IAEF;;;;;;;;;OASG;IACY,kBAAW,GAAzB,UAA0B,QAAa,EAAE,MAAW,EAAE,OAAgB;QAClE,OAAO,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAoBa,aAAM,GAApB,UAAqB,KAAgB,EAAE,QAAc,EAAE,OAAgB;QACnE,OAAO,MAAM,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC5C,CAAC;IACL,aAAC;AAAD,CAAC,AA3ID,IA2IC;ACjJD,0BAA0B;AAC1B;IAAA;IAMA,CAAC;IAAD,eAAC;AAAD,CAAC,AAND,IAMC;ACRD,+CAA+C;AAC/C,+CAA+C;AAC/C,kCAAkC;AAClC,qCAAqC;AAErC;IAEI,mBAAY,IAAa;QASzB,mFAAmF;QAC5E,kBAAa,GAAY,IAAI,CAAC;QAErC,iFAAiF;QAC1E,kBAAa,GAAY,IAAI,CAAC;QAZjC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAaD,yDAAyD;IAClD,kCAAc,GAArB;IACA,CAAC;IAED,yDAAyD;IAClD,+BAAW,GAAlB;IACA,CAAC;IAED,iHAAiH;IAC1G,iCAAa,GAApB;IACA,CAAC;IAED,kDAAkD;IAC3C,iCAAa,GAApB,UAAqB,QAAuB;QAA5C,iBA4EC;QA3EG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACrF;QAED,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;SAC3E;QAED,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAClE;QAED,uFAAuF;QACvF,IAAM,UAAU,GAAG,UAAC,MAAM;YACtB,IAAM,IAAI,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;YAE5B,wDAAwD;YACxD,SAAS,CAAC,gBAAgB,GAAG,KAAI,CAAC;YAElC,gBAAgB;YAChB,IAAI;gBACA,KAAI,CAAC,aAAa,EAAE,CAAC;gBAErB,IAAM,OAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;gBAC7B,IAAM,SAAO,GAAG;oBACZ,IAAI,OAAK,CAAC,MAAM,EAAE;wBACd,IAAM,IAAI,GAAG,OAAK,CAAC,KAAK,EAAE,CAAC;wBAE3B,oDAAoD;wBACpD,IAAM,mBAAmB,GAAG;4BACxB,UAAU,CAAC;gCACP,SAAO,EAAE,CAAC;4BACd,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;wBAC3B,CAAC,CAAC;wBAEF,oDAAoD;wBACpD,6EAA6E;wBAC7E,0FAA0F;wBAC1F,4EAA4E;wBAC5E,IAAI;4BACA,IAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE;gCACnC,IAAI,CAAC,IAAI,CAAC,KAAI,EAAE,mBAAmB,CAAC,CAAC;6BACxC;iCAAM;gCACH,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;gCAChB,mBAAmB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;6BAClC;yBACJ;wBAAC,OAAO,CAAC,EAAE;4BACR,KAAI,CAAC,cAAc,EAAE,CAAC;4BACtB,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;4BAE/B,wDAAwD;4BACxD,IAAI,EAAE,CAAC;4BAEP,OAAO;yBACV;qBACJ;yBAAM;wBACH,KAAI,CAAC,cAAc,EAAE,CAAC;wBAEtB,wDAAwD;wBACxD,IAAI,EAAE,CAAC;qBACV;gBACL,CAAC,CAAC;gBAEF,SAAO,EAAE,CAAC;aACb;YAAC,OAAO,EAAE,EAAE;gBACT,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,wBAAwB,GAAG,EAAE,CAAC,CAAC;gBAChD,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAE1B,wDAAwD;gBACxD,IAAI,EAAE,CAAC;aACV;QACL,CAAC,CAAC;QAEF,+BAA+B;QAC/B,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC1C,CAAC;IAED,2CAA2C;IACpC,4BAAQ,GAAf,UAAgB,QAAkB;QAAlC,iBA8BC;QA7BG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACrF;QAED,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;SAC9F;QAED,uFAAuF;QACvF,IAAM,UAAU,GAAG;YACf,wDAAwD;YACxD,SAAS,CAAC,gBAAgB,GAAG,KAAI,CAAC;YAElC,gBAAgB;YAChB,IAAI;gBACA,KAAI,CAAC,aAAa,EAAE,CAAC;gBAErB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;gBAEzB,KAAI,CAAC,cAAc,EAAE,CAAC;aACzB;YACD,OAAO,EAAE,EAAE;gBACP,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,wBAAwB,GAAG,EAAE,CAAC,CAAC;gBAChD,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aAC7B;QACL,CAAC,CAAC;QAEF,+BAA+B;QAC/B,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IACpC,CAAC;IAED,wCAAwC;IAChC,iCAAa,GAArB;QACI,mGAAmG;QACnG,IAAM,MAAM,GAAI,KAAa,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtD,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAC1C,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAE1C,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,cAAc,IAAI,IAAI,IAAI,MAAM,CAAC,UAAU,CAAC;QACvE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAElC,0DAA0D;QAC1D,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAED,yCAAyC;IACjC,kCAAc,GAAtB,UAAuB,MAAgB;QACnC,IAAI,MAAM,EAAE;YACR,8DAA8D;YAC9D,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;aACI;YACD,kCAAkC;YACjC,IAAI,CAAC,OAAe,CAAC,gBAAgB,EAAE,CAAC;SAC5C;QAED,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,qDAAqD;QACrD,SAAS,CAAC,gBAAgB,GAAG,IAAI,CAAC;IACtC,CAAC;IAgBM,uBAAG,GAAV;QAAW,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAAc,OAAO,IAAI,CAAC;IAAC,CAAC;IAQ9C,wBAAI,GAAX;QAAY,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAAe,OAAO,IAAI,CAAC;IAAC,CAAC;IAEvD,gJAAgJ;IACzI,wBAAI,GAAX,UAAY,MAAW,IAAe,OAAO,IAAI,CAAC,CAAC,CAAC;IAEpD,4CAA4C;IAE5C;;;;MAIE;IACK,oCAAgB,GAAvB,UAAwB,OAAgC,EAAE,IAAS,EAAE,SAAkB;QACnF,IAAI,SAAS,KAAK,SAAS,EAAE;YACzB,SAAS,GAAG,GAAG,CAAC;SACnB;QAED,OAAO,CAAC,OAAO,CACX,SAAS,EACT,EAAE,cAAc,EAAE,kBAAkB,EAAE,EACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC;IAES,gCAAY,GAAtB,UAAuB,SAAiB;QACpC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,EAC/C;YACI,YAAY,EAAE,IAAI;YAClB,GAAG;gBACC,OAAO,SAAS,CAAC;YACrB,CAAC;SACJ,CAAC,CAAC;IACX,CAAC;IA5Na,2BAAiB,GAAG,eAAe,CAAC;IA6NtD,gBAAC;CAAA,AAnOD,IAmOC;AAED,kBAAkB;AAClB,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,UAAU,GAAI;IAC9B,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEF,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,UAAU,SAAS;IACnC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF,KAAK,CAAC,MAAM,GAAG;IACX,cAAc,EAAE,IAAI;IACpB,UAAU,EAAE,IAAI;IAChB,UAAU,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;IACvD,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;CACtB,CAAC;ACzPF,+CAA+C;AAC/C,+CAA+C;AAC/C,kCAAkC;AAClC,qCAAqC;AACrC,oCAAoC;;;;ICEnC,CAAC;IAEF,SAAS,MAAM,CAAC,GAAU;QACxB,OAAO,GAAG,CAAC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;IACtD,CAAC;IAED,SAAS,kBAAkB,CAAC,OAAW;QACrC,IAAI,OAAO,EAAE;YACX,OAAO,OAAO,CAAC,SAAS,KAAK,KAAK,IAAI,OAAO,CAAC,SAAS,KAAK,KAAK,CAAC;SACnE;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,kGAAkG;IAClG,4CAA4C;IAC5C,SAAS,MAAM,CAAC,KAAY,EAAE,GAAU,EAAE,IAAW;QACnD,IAAI,KAAK,GAAG,KAAK,IAAE,EAAE,CAAC;QACtB,OAAO,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;YACzB,KAAK,IAAI,IAAI,CAAC;SACf;QAED,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;YACtB,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SACjC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,SAAS,kBAAkB,CAAC,KAAY;QACtC,IAAI,KAAK,EAAE;YACT,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;SAC5C;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,SAAwB,aAAa,CAAC,OAAuC;QAAvC,wBAAA,EAAA,YAAuC;QAC3E,IAAI,KAAK,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,OAAO,IAAI,mBAAmB,CAAC;QAC3D,IAAI,YAAY,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,OAAO,IAAI,iCAAiC,CAAC;QAChF,IAAI,WAAW,GAAiB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,aAAa,GAAU,CAAC,CAAC;QAE7B,8GAA8G;QAC9G,IAAM,OAAO,GAAG,IAAI,MAAM,CAAC,uEAAuE,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,mNAAmN,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,iFAAiF,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,cAAc,EAAE,IAAI,CAAC,CAAC;QAErd,SAAS,WAAW,CAAC,KAAY,EAAE,IAAW,EAAE,GAAU,EAAE,EAAS;YACnE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAC9C,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,KAAK,GAAG,GAAG,CAAC;YAChB,OAAO,KAAK,GAAG,CAAC,EAAE;gBAChB,UAAU,EAAG,CAAC;gBACd,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;aAC3C;YAED,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YAC5C,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE;gBACnB,MAAM,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;aAC5B;iBAAM;gBACL,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;aAClB;YAED,IAAI,OAAO,GAAG,6BAA6B,GAAG,KAAK,GAAG,mBAAmB,GAAG,UAAU,GAAG,aAAa,GAAG,MAAM,GAAG,eAAe,GAAG,GAAG,GAAG,MAAM,GAAG,CAAC,EAAE,IAAE,EAAE,CAAC,GAAG,IAAI,CAAC;YAEnK,IAAI,MAAM,GAAG,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAC3C,IAAI,IAAI,GAAG,UAAU,GAAG,CAAC,CAAC;YAC1B,IAAI,IAAI,GAAG,CAAC,EAAE;gBACZ,OAAO,IAAI,QAAQ,CAAC;aACrB;YAED,KAAK,GAAG,CAAC,CAAC;YACV,OAAO,KAAK,GAAG,EAAE,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,GAAC,CAAC,EAAE;gBAC1C,KAAK,EAAE,CAAC;gBACR,IAAI,IAAI,IAAI,CAAC,EAAE;oBACb,IAAI,MAAM,GAAG,MAAM,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;oBAC7C,OAAO,IAAI,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;oBAC7C,IAAI,IAAI,IAAI,UAAU,GAAC,CAAC,EAAE;wBACxB,OAAO,IAAI,MAAM,CAAC,EAAE,EAAE,MAAM,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC;qBACxD;iBACF;gBAED,IAAI,EAAE,CAAC;aACR;YAED,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,GAAC,CAAC,EAAE;gBACzB,OAAO,IAAI,QAAQ,CAAC;aACrB;YAED,IAAI,KAAK,CAAC;YACV,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;gBACnC,IAAI,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;gBACpC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;oBACjC,IAAI,UAAU,IAAI,CAAC,EAAE;wBACnB,OAAO,IAAI,kBAAkB,CAAC;qBAC/B;oBAED,UAAU,EAAE,CAAC;oBACb,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;wBACvB,OAAO,IAAI,QAAQ,GAAG,UAAU,GAAG,kBAAkB,GAAG,CAAC,QAAQ,IAAE,EAAE,CAAC,GAAG,IAAI,CAAC;wBAC9E,OAAO,IAAI,sCAAsC,CAAC;wBAClD,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,OAAO,IAAI,sCAAsC,CAAC;wBAClD,KAAI,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;4BACvC,IAAI,KAAK,CAAC,EAAE,CAAC,EAAE;gCACb,OAAO,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gCAC1F,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;oCACxC,OAAO,IAAI,kBAAkB,CAAC;iCAC/B;gCACD,OAAO,IAAI,IAAI,CAAC;6BACjB;yBACF;wBACD,OAAO,IAAI,IAAI,CAAC;qBACjB;iBACF;aACF;YAED,OAAO,OAAO,CAAC;QACjB,CAAC;QAED,SAAS,YAAY,CAAC,IAAW,EAAE,SAAqB;YACtD,IAAI,MAAM,GAAG,KAAK,CAAC;YACnB,IAAI,KAAK,CAAC;YACV,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;gBACnC,IAAI,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;gBACpC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;oBACjC,sDAAsD;oBACtD,IAAI,QAAQ,GAAG,KAAK,CAAC;oBACrB,KAAI,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;wBAC7C,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,IAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;4BACrD,QAAQ,GAAG,IAAI,CAAC;4BAChB,MAAM;yBACP;qBACF;oBAED,IAAI,QAAQ,EAAE;wBACZ,MAAM,GAAG,IAAI,CAAC;wBACd,IAAI,OAAK,GAAG,KAAK,CAAC,KAAK,CAAC;wBACxB,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;wBAC5D,SAAS,CAAC,SAAS,CAAC,OAAK,EAAE,OAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;qBAC/D;iBACF;aACF;YAED,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,SAAS,WAAW,CAAC,MAAa,EAAE,EAAS;YAC3C,IAAI,MAAM,EAAE;gBACV,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,GAAG,IAAI,CAAC,CAAC,EAAE;oBACb,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;iBACtD;aACF;QACH,CAAC;QAED,SAAS,WAAW,CAAC,IAAW,EAAE,EAAS;YACzC,IAAI,SAAS,GAAG,IAAI,sBAAW,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC;aACb;YAED,IAAI,MAAM,GAAO,EAAE,IAAI,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAE,CAAC;YAChD,IAAI,kBAAkB,CAAC,OAAO,CAAC,EAAE;gBAC/B,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC,WAAW,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;aACnD;YAED,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,SAAS,mBAAmB,CAAC,IAAW,EAAE,EAAS;YACjD,IAAI,MAAM,GAAG,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACnC,IAAI,MAAM,EAAE;gBACV,iCAAiC;gBACjC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aAC9B;iBAAM;gBACL,mDAAmD;gBACnD,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aACvB;YAED,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,OAAO;YACL,IAAI,EAAE,eAAe;YACrB,WAAW,YAAC,IAAW,EAAE,KAAS;gBAChC,OAAO,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;YACnD,CAAC;YACD,SAAS,EAAE,mBAAmB;SAC/B,CAAA;IACH,CAAC;IA1JD,gCA0JC;;AC3MD,kDAAkD;;;;;IAIlD;QAA6C,2CAAS;QAAtD;;QAopBA,CAAC;QAlpBU,gDAAc,GAArB;QACA,CAAC;QAEO,iDAAe,GAAvB,UAAwB,KAAK;YACzB,IAAI,KAAK,EAAE;gBACP,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aAC5D;YAED,OAAO,KAAK,CAAC;QACjB,CAAC;QAEO,iDAAe,GAAvB,UAAwB,KAAK,EAAE,OAAO;YAClC,IAAI,KAAK,EAAE;gBACP,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;aACxC;YAED,OAAO,KAAK,CAAC;QACjB,CAAC;QAEO,8CAAY,GAApB,UAAqB,OAAW,EAAE,KAAY;YAC1C,IAAI,MAAM,GAAG,IAAA,uBAAa,EAAC,OAAO,CAAC,CAAC;YAEpC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;YACjD,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YAC7E,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;QAChE,CAAC;QAEO,wCAAM,GAAd,UAAe,OAAW,EAAE,KAAY,EAAE,QAAe;YACrD,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC5C,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;YACpG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;YACxG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;QAC5G,CAAC;QAEO,8CAAY,GAApB,UAAqB,OAAW,EAAE,KAAY,EAAE,QAAe;YAC3D,IAAI,MAAM,GAAG,IAAA,uBAAa,EAAC,OAAO,CAAC,CAAC;YAEpC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;YACjD,IAAI,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;YAChE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAE7H,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC3C,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACjI,CAAC;QAEO,2CAAS,GAAjB,UAAkB,OAAW,EAAE,OAAc,EAAE,KAAY,EAAE,QAAe;YACxE,IAAI,MAAM,GAAG,IAAA,uBAAa,EAAC,OAAO,CAAC,CAAC;YAEpC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;gBAChB,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;YACvD,CAAC,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;YAEjC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;gBAChB,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YACvC,CAAC,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;QACrC,CAAC;QAEM,+CAAa,GAApB;YAAA,iBAwlBC;YAvlBG,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,gCAAgC;gBACtC,IAAI,EAAE;oBACF,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;oBAE3C,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,yDAAyD,CAAC,CAAC;oBAEnF,KAAI,CAAC,YAAY,CAAC,IAAI,EAClB,kDAAkD;wBAClD,qDAAqD;wBACrD,MAAM,CAAC,CAAC;oBAEZ,KAAI,CAAC,YAAY,CAAC,IAAI,EAClB,kDAAkD;wBAClD,qDAAqD;wBACrD,MAAM,CAAC,CAAC;oBAEZ,KAAI,CAAC,YAAY,CAAC,IAAI,EAClB,8BAA8B;wBAC9B,2BAA2B;wBAC3B,qDAAqD;wBACrD,MAAM,CAAC,CAAC;oBAEZ,KAAI,CAAC,YAAY,CAAC,IAAI,EAClB,2BAA2B;wBAC3B,+CAA+C;wBAC/C,MAAM,CAAC,CAAC;oBAEZ,KAAI,CAAC,YAAY,CAAC,IAAI,EAClB,2BAA2B;wBAC3B,gDAAgD;wBAChD,MAAM,CAAC,CAAC;oBAEZ,KAAI,CAAC,YAAY,CAAC,IAAI,EAClB,2BAA2B;wBAC3B,6CAA6C;wBAC7C,gDAAgD;wBAChD,WAAW;wBACX,MAAM,CAAC,CAAC;gBACZ,CAAC;aACR,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,oBAAoB;gBAC1B,IAAI,EAAE;oBACF,KAAI,CAAC,MAAM,CAAC,IAAI,EACZ,0CAA0C;wBAC1C,kDAAkD;wBAClD,qDAAqD;wBACrD,MAAM,EACN,uDAAuD,CAAC,CAAC;oBAE7D,KAAI,CAAC,MAAM,CAAC,IAAI,EACZ,kDAAkD;wBAClD,2DAA2D;wBAC3D,MAAM,EACN,uDAAuD,CAAC,CAAC;oBAE7D,KAAI,CAAC,MAAM,CAAC,IAAI,EACZ,kDAAkD;wBAClD,4DAA4D;wBAC5D,MAAM,EACN,uDAAuD,CAAC,CAAC;oBAE7D,KAAI,CAAC,MAAM,CAAC,IAAI,EACZ,kDAAkD;wBAClD,yDAAyD;wBACzD,gDAAgD;wBAChD,WAAW;wBACX,MAAM,EACN,uDAAuD,CAAC,CAAC;gBACjE,CAAC;aACJ,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,4BAA4B;gBAClC,IAAI,EAAE;oBACF,KAAI,CAAC,MAAM,CAAC,IAAI;oBACZ,UAAU;oBACV,2HAA2H;wBAC3H,0GAA0G;wBAC1G,UAAU;wBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,0FAA0F;wBAC1F,UAAU;wBACV,WAAW;wBACX,+FAA+F;wBAC/F,4DAA4D;wBAC5D,mGAAmG;wBACnG,8GAA8G;wBAC9G,sEAAsE;wBACtE,WAAW;wBACX,6DAA6D;wBAC7D,6CAA6C;wBAC7C,WAAW;wBACX,sBAAsB;wBACtB,WAAW;wBACX,iDAAiD;wBACjD,8BAA8B;wBAC9B,UAAU;wBACV,WAAW;wBACX,+FAA+F;wBAC/F,4DAA4D;wBAC5D,mGAAmG;wBACnG,8GAA8G;wBAC9G,sEAAsE;wBACtE,WAAW;wBACX,6DAA6D;wBAC7D,gDAAgD;wBAChD,UAAU;wBACV,iDAAiD;wBACjD,UAAU;wBACV,WAAW;wBACX,+FAA+F;wBAC/F,4DAA4D;wBAC5D,mGAAmG;wBACnG,8GAA8G;wBAC9G,sEAAsE;wBACtE,WAAW;wBACX,6DAA6D;wBAC7D,mDAAmD;wBACnD,UAAU;wBACV,uBAAuB;oBACvB,iBAAiB;oBACjB,2HAA2H;wBAC3H,0GAA0G;wBAC1G,UAAU;wBACV,kDAAkD;wBAClD,kDAAkD;wBAClD,WAAW;wBACX,sBAAsB;wBACtB,WAAW;wBACX,iDAAiD;wBACjD,8BAA8B;wBAC9B,UAAU;wBACV,kDAAkD;wBAClD,iDAAiD;wBACjD,UAAU;wBACV,kDAAkD;wBAClD,uBAAuB,CACtB,CAAC;oBAEN,KAAI,CAAC,YAAY,CAAC,IAAI;oBAClB,UAAU;oBACV,aAAa;wBACb,uHAAuH;wBACvH,wDAAwD;wBACxD,sDAAsD;wBACtD,wEAAwE;wBACxE,aAAa;wBACb,+BAA+B;wBAC/B,4FAA4F;wBAC5F,YAAY;wBACZ,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,0FAA0F;wBAC1F,UAAU;wBACV,aAAa;wBACb,uHAAuH;wBACvH,wDAAwD;wBACxD,sDAAsD;wBACtD,wEAAwE;wBACxE,aAAa;wBACb,+BAA+B;wBAC/B,4FAA4F;wBAC5F,YAAY;wBACZ,EAAE;oBACF,iBAAiB;oBACjB,oDAAoD;wBACpD,kDAAkD;wBAClD,oDAAoD,CACnD,CAAC;gBACV,CAAC;aACJ,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,0BAA0B;gBAChC,IAAI,EAAE;oBACF,KAAI,CAAC,MAAM,CAAC,IAAI;oBACZ,UAAU;oBACV,2HAA2H;wBAC3H,0GAA0G;wBAC1G,UAAU;wBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,0FAA0F;wBAC1F,mBAAmB;wBACnB,UAAU;wBACV,WAAW;wBACX,+FAA+F;wBAC/F,4DAA4D;wBAC5D,mGAAmG;wBACnG,8GAA8G;wBAC9G,sEAAsE;wBACtE,WAAW;wBACX,6DAA6D;wBAC7D,mBAAmB;wBACnB,6CAA6C;wBAC7C,WAAW;wBACX,sBAAsB;wBACtB,WAAW;wBACX,iDAAiD;wBACjD,8BAA8B;wBAC9B,mBAAmB;wBACnB,UAAU;wBACV,WAAW;wBACX,+FAA+F;wBAC/F,4DAA4D;wBAC5D,mGAAmG;wBACnG,8GAA8G;wBAC9G,sEAAsE;wBACtE,WAAW;wBACX,6DAA6D;wBAC7D,gDAAgD;wBAChD,mBAAmB;wBACnB,UAAU;wBACV,iDAAiD;wBACjD,mBAAmB;wBACnB,UAAU;wBACV,WAAW;wBACX,+FAA+F;wBAC/F,4DAA4D;wBAC5D,mGAAmG;wBACnG,8GAA8G;wBAC9G,sEAAsE;wBACtE,WAAW;wBACX,6DAA6D;wBAC7D,mDAAmD;wBACnD,mBAAmB;wBACnB,UAAU;wBACV,uBAAuB;oBACvB,iBAAiB;oBACjB,2HAA2H;wBAC3H,0GAA0G;wBAC1G,UAAU;wBACV,kDAAkD;wBAClD,kDAAkD;wBAClD,WAAW;wBACX,sBAAsB;wBACtB,WAAW;wBACX,iDAAiD;wBACjD,8BAA8B;wBAC9B,mBAAmB;wBACnB,UAAU;wBACV,kDAAkD;wBAClD,iDAAiD;wBACjD,mBAAmB;wBACnB,UAAU;wBACV,kDAAkD;wBAClD,uBAAuB,CACtB,CAAC;oBAEN,KAAI,CAAC,MAAM,CAAC,IAAI;oBACZ,UAAU;oBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,0FAA0F;wBAC1F,sCAAsC;wBACtC,UAAU;wBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,0FAA0F;wBAC1F,sCAAsC;wBACtC,UAAU;wBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,0FAA0F;wBAC1F,sCAAsC;wBACtC,UAAU;wBACV,EAAE;oBACF,iBAAiB;oBACjB,kDAAkD;wBAClD,kDAAkD;wBAClD,kDAAkD,CACjD,CAAC;gBACV,CAAC;aACJ,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,oCAAoC;gBAC1C,IAAI,EAAE;oBACF,KAAI,CAAC,MAAM,CAAC,IAAI;oBACZ,UAAU;oBACV,2HAA2H;wBAC3H,0GAA0G;wBAC1G,UAAU;wBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,+FAA+F;wBAC/F,UAAU;wBACV,WAAW;wBACX,+FAA+F;wBAC/F,4DAA4D;wBAC5D,mGAAmG;wBACnG,8GAA8G;wBAC9G,sEAAsE;wBACtE,WAAW;wBACX,mEAAmE;wBACnE,mBAAmB;wBACnB,6CAA6C;wBAC7C,WAAW;wBACX,sBAAsB;wBACtB,WAAW;wBACX,sDAAsD;wBACtD,8BAA8B;wBAC9B,mBAAmB;wBACnB,UAAU;wBACV,uBAAuB;oBACvB,iBAAiB;oBACjB,2HAA2H;wBAC3H,0GAA0G;wBAC1G,UAAU;wBACV,uDAAuD;wBACvD,wDAAwD;wBACxD,WAAW;wBACX,sBAAsB;wBACtB,WAAW;wBACX,sDAAsD;wBACtD,8BAA8B;wBAC9B,mBAAmB;wBACnB,UAAU;wBACV,uBAAuB,CACtB,CAAC;oBAEN,KAAI,CAAC,MAAM,CAAC,IAAI;oBACZ,UAAU;oBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,+FAA+F;wBAC/F,oCAAoC;wBACpC,UAAU;wBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,gGAAgG;wBAChG,sCAAsC;wBACtC,UAAU;wBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,+FAA+F;wBAC/F,sCAAsC;wBACtC,UAAU;wBACV,WAAW;wBACX,qHAAqH;wBACrH,sDAAsD;wBACtD,oDAAoD;wBACpD,sEAAsE;wBACtE,WAAW;wBACX,6BAA6B;wBAC7B,0FAA0F;wBAC1F,sCAAsC;wBACtC,UAAU;wBACV,EAAE;oBACF,iBAAiB;oBACjB,uDAAuD;wBACvD,wDAAwD;wBACxD,uDAAuD;wBACvD,kDAAkD,CACjD,CAAC;gBACV,CAAC;aACJ,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,+CAA+C;gBACrD,IAAI,EAAE;oBACF,KAAI,CAAC,SAAS,CAAC,IAAI,EACf,qBAAqB,EACrB,0CAA0C;wBAC1C,2BAA2B;wBAC3B,qDAAqD;wBACrD,MAAM,EACN,uGAAuG;wBACvG,+CAA+C;wBAC/C,6BAA6B;wBAC7B,gCAAgC;wBAChC,0DAA0D;wBAC1D,WAAW,CAAC,CAAC;oBAEjB,KAAI,CAAC,SAAS,CAAC,IAAI,EACf,iCAAiC,EACjC,2BAA2B;wBAC3B,0DAA0D;wBAC1D,MAAM,EACN,wGAAwG;wBACxG,gCAAgC;wBAChC,+DAA+D;wBAC/D,iCAAiC;wBACjC,WAAW,CAAC,CAAC;oBAEjB,KAAI,CAAC,SAAS,CAAC,IAAI,EACf,+BAA+B,EAC/B,2BAA2B;wBAC3B,2DAA2D;wBAC3D,MAAM,EACN,wGAAwG;wBACxG,gCAAgC;wBAChC,gEAAgE;wBAChE,iCAAiC;wBACjC,WAAW,CAAC,CAAC;oBAEjB,KAAI,CAAC,SAAS,CAAC,IAAI,EACf,mCAAmC,EACnC,2BAA2B;wBAC3B,wDAAwD;wBACxD,+CAA+C;wBAC/C,UAAU;wBACV,MAAM,EACN,wGAAwG;wBACxG,gCAAgC;wBAChC,6DAA6D;wBAC7D,iCAAiC;wBACjC,oDAAoD;wBACpD,eAAe;wBACf,WAAW,CAAC,CAAC;oBAEjB,KAAI,CAAC,SAAS,CAAC,IAAI,EACf,qBAAqB,EACrB,0CAA0C;wBAC1C,2BAA2B;wBAC3B,qDAAqD;wBACrD,MAAM;wBACN,0CAA0C;wBAC1C,kDAAkD;wBAClD,qDAAqD;wBACrD,MAAM,EACN,uGAAuG;wBACvG,+CAA+C;wBAC/C,6BAA6B;wBAC7B,gCAAgC;wBAChC,0DAA0D;wBAC1D,WAAW;wBACX,4DAA4D,CAAC,CAAC;oBAGlE,KAAI,CAAC,SAAS,CAAC,IAAI,EACf,iCAAiC,EACjC,2BAA2B;wBAC3B,0DAA0D;wBAC1D,MAAM;wBACN,0CAA0C;wBAC1C,kDAAkD;wBAClD,qDAAqD;wBACrD,MAAM,EACN,wGAAwG;wBACxG,gCAAgC;wBAChC,+DAA+D;wBAC/D,iCAAiC;wBACjC,WAAW;wBACX,4DAA4D,CAAC,CAAC;oBAElE,KAAI,CAAC,SAAS,CAAC,IAAI,EACf,kCAAkC,EAClC,2BAA2B;wBAC3B,2DAA2D;wBAC3D,MAAM;wBACN,0CAA0C;wBAC1C,kDAAkD;wBAClD,qDAAqD;wBACrD,MAAM,EACN,wGAAwG;wBACxG,gCAAgC;wBAChC,gEAAgE;wBAChE,iCAAiC;wBACjC,WAAW;wBACX,4DAA4D,CAAC,CAAC;oBAElE,KAAI,CAAC,SAAS,CAAC,IAAI,EACf,mCAAmC,EACnC,2BAA2B;wBAC3B,wDAAwD;wBACxD,+CAA+C;wBAC/C,UAAU;wBACV,MAAM;wBACN,0CAA0C;wBAC1C,kDAAkD;wBAClD,qDAAqD;wBACrD,MAAM,EACN,wGAAwG;wBACxG,gCAAgC;wBAChC,6DAA6D;wBAC7D,iCAAiC;wBACjC,oDAAoD;wBACpD,eAAe;wBACf,WAAW;wBACX,4DAA4D,CAAC,CAAC;gBACtE,CAAC;aACJ,CAAC,CAAC;YAGH,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,oFAAoF;gBAC1F,IAAI,EAAE;oBACF,KAAI,CAAC,MAAM,CAAC,IAAI,EACZ,OAAO;wBACP,+EAA+E;wBAC/E,OAAO;wBACP,8EAA8E;wBAC9E,2BAA2B;wBAC3B,uDAAuD;wBACvD,0CAA0C;wBAC1C,SAAS;wBACT,4BAA4B;wBAC5B,oBAAoB;wBACpB,MAAM,EACN,mFAAmF,CAAC,CAAC;oBAEzF,KAAI,CAAC,MAAM,CAAC,IAAI,EACZ,WAAW;wBACX,mGAAmG;wBACnG,0DAA0D;wBAC1D,oCAAoC;wBACpC,+BAA+B;wBAC/B,OAAO;wBACP,+DAA+D;wBAC/D,8CAA8C;wBAC9C,4BAA4B;wBAC5B,MAAM,EACN,+DAA+D,CAAC,CAAC;oBAErE,KAAI,CAAC,MAAM,CAAC,IAAI,EACZ,OAAO;wBACP,+EAA+E;wBAC/E,OAAO;wBACP,8EAA8E;wBAC9E,2BAA2B;wBAC3B,uDAAuD;wBACvD,0CAA0C;wBAC1C,SAAS;wBACT,4BAA4B;wBAC5B,UAAU;wBACV,oBAAoB;wBACpB,MAAM,EACN,mFAAmF,CAAC,CAAC;oBAEzF,KAAI,CAAC,MAAM,CAAC,IAAI,EACZ,WAAW;wBACX,mGAAmG;wBACnG,0DAA0D;wBAC1D,oCAAoC;wBACpC,+BAA+B;wBAC/B,OAAO;wBACP,+DAA+D;wBAC/D,8CAA8C;wBAC9C,4BAA4B;wBAC5B,UAAU;wBACV,MAAM,EACN,+DAA+D,CAAC,CAAC;gBACrE,CAAC;aACR,CAAC,CAAC;QACP,CAAC;QACL,8BAAC;IAAD,CAAC,AAppBD,CAA6C,SAAS,GAopBrD;IAppBY,0DAAuB;;;;;;ICFpC,SAAgB,QAAQ;QACpB,IAAI,kDAAuB,EAAE,CAAC,aAAa,EAAE,CAAC;IAClD,CAAC;IAFD,4BAEC","sourcesContent":["/// <reference path=\"../External/qunit.d.ts\" />\n\n/** \n * Wrapper around QUnit asserts. This class has two purposes:\n * - Make Assertion methods easy to discover.\n * - Make them consistent with XUnit assertions in the order of the actual and expected parameter values.\n */\nclass Assert {\n   /**\n    * A deep recursive comparison assertion, working on primitive types, arrays, objects, \n    * regular expressions, dates and functions.\n    *\n    * The deepEqual() assertion can be used just like equal() when comparing the value of \n    * objects, such that { key: value } is equal to { key: value }. For non-scalar values, \n    * identity will be disregarded by deepEqual.\n    *\n    * @param expected Known comparison value\n    * @param actual Object or Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static deepEqual(expected: any, actual: any, message?: string): any {\n        return deepEqual(actual, expected, message);\n    }\n\n   /** \n    * A non-strict comparison assertion, roughly equivalent to JUnit assertEquals.\n    *\n    * The equal assertion uses the simple comparison operator (==) to compare the actual \n    * and expected arguments. When they are equal, the assertion passes: any; otherwise, it fails. \n    * When it fails, both actual and expected values are displayed in the test result, \n    * in addition to a given message.\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static equal(expected: any, actual: any, message?: string): any {\n        return equal(actual, expected, message);\n    }\n\n   /**\n    * An inverted deep recursive comparison assertion, working on primitive types, \n    * arrays, objects, regular expressions, dates and functions.\n    *\n    * The notDeepEqual() assertion can be used just like equal() when comparing the \n    * value of objects, such that { key: value } is equal to { key: value }. For non-scalar \n    * values, identity will be disregarded by notDeepEqual.\n    * \n    * @param expected Known comparison value\n    * @param actual Object or Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static notDeepEqual(expected: any, actual: any, message?: string): any {\n        return notDeepEqual(actual, expected, message);\n    }\n\n   /**\n    * A non-strict comparison assertion, checking for inequality.\n    *\n    * The notEqual assertion uses the simple inverted comparison operator (!=) to compare \n    * the actual and expected arguments. When they aren't equal, the assertion passes: any; \n    * otherwise, it fails. When it fails, both actual and expected values are displayed \n    * in the test result, in addition to a given message.\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static notEqual(expected: any, actual: any, message?: string): any {\n        return notEqual(actual, expected, message);\n    }\n\n    public static notPropEqual(expected: any, actual: any, message?: string): any {\n        return notPropEqual(actual, expected, message);\n    }\n\n    public static propEqual(expected: any, actual: any, message?: string): any {\n        return propEqual(actual, expected, message);\n    }\n\n   /**\n    * A non-strict comparison assertion, checking for inequality.\n    *\n    * The notStrictEqual assertion uses the strict inverted comparison operator (!==) \n    * to compare the actual and expected arguments. When they aren't equal, the assertion \n    * passes: any; otherwise, it fails. When it fails, both actual and expected values are \n    * displayed in the test result, in addition to a given message.\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static notStrictEqual(expected: any, actual: any, message?: string): any {\n        return notStrictEqual(actual, expected, message);\n    }\n\n   /**\n    * A boolean assertion, equivalent to CommonJS's assert.ok() and JUnit's assertTrue(). \n    * Passes if the first argument is truthy.\n    *\n    * The most basic assertion in QUnit, ok() requires just one argument. If the argument \n    * evaluates to true, the assertion passes; otherwise, it fails. If a second message \n    * argument is provided, it will be displayed in place of the result.\n    * \n    * @param state Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static ok(state: any, message?: string): any {\n        return ok(state, message);\n    }\n\n   /**\n    * A strict type and value comparison assertion.\n    *\n    * The strictEqual() assertion provides the most rigid comparison of type and value with \n    * the strict equality operator (===)\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static strictEqual(expected: any, actual: any, message?: string): any {\n        return strictEqual(actual, expected, message);\n    }\n\n   /**\n    * Assertion to test if a callback throws an exception when run.\n    * \n    * When testing code that is expected to throw an exception based on a specific set of \n    * circumstances, use throws() to catch the error object for testing and comparison.\n    * \n    * @param block Function to execute\n    * @param expected Error Object to compare\n    * @param message A short description of the assertion\n    */\n    public static throws(block: () => any, expected: any, message?: string): any;\n\n   /**\n    * @param block Function to execute\n    * @param message A short description of the assertion\n    */\n    public static throws(block: () => any, message?: string): any;\n\n    public static throws(block: () => any, expected?: any, message?: string): any {\n        return throws(block, expected, message);\n    }\n}","\n/** Defines a test case */\nclass TestCase {\n    /** Name to use for the test case */\n    public name: string;\n\n    /** Test case method */\n    public test: () => void;\n}\n\n\n/** Defines a test case */\ninterface TestCaseAsync {\n    /** Name to use for the test case */\n    name: string;\n\n    /** time to wait after pre before invoking post and calling start() */\n    stepDelay: number;\n\n    /** async steps */\n    steps: Array<() => void>;\n}","/// <reference path=\"../External/sinon.d.ts\" />\n/// <reference path=\"../External/qunit.d.ts\" />\n/// <reference path=\"Assert.ts\" />\n/// <reference path=\"./TestCase.ts\"/>\n\nclass TestClass {\n\n    constructor(name?: string) {\n        QUnit.module(name);\n    }\n\n    public static isPollingStepFlag = \"isPollingStep\";\n\n    /** The instance of the currently running suite. */\n    public static currentTestClass: TestClass;\n\n    /** Turns on/off sinon's syncronous implementation of setTimeout. On by default. */\n    public useFakeTimers: boolean = true;\n\n    /** Turns on/off sinon's fake implementation of XMLHttpRequest. On by default. */\n    public useFakeServer: boolean = true;\n\n    /** Method called before the start of each test method */\n    public testInitialize() {\n    }\n\n    /** Method called after each test method has completed */\n    public testCleanup() {\n    }\n\n    /** Method in which test class intances should call this.testCase(...) to register each of this suite's tests. */\n    public registerTests() {\n    }\n\n    /** Register an async Javascript unit testcase. */\n    public testCaseAsync(testInfo: TestCaseAsync) {\n        if (!testInfo.name) {\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\n        }\n\n        if (isNaN(testInfo.stepDelay)) {\n            throw new Error(\"Must specify 'stepDelay' period between pre and post\");\n        }\n\n        if (!testInfo.steps) {\n            throw new Error(\"Must specify 'steps' to take asynchronously\");\n        }\n\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\n        const testMethod = (assert) => {\n            const done = assert.async();\n\n            // Save off the instance of the currently running suite.\n            TestClass.currentTestClass = this;\n\n            // Run the test.\n            try {\n                this._testStarting();\n\n                const steps = testInfo.steps;\n                const trigger = () => {\n                    if (steps.length) {\n                        const step = steps.shift();\n\n                        // The callback which activates the next test step. \n                        const nextTestStepTrigger = () => {\n                            setTimeout(() => {\n                                trigger();\n                            }, testInfo.stepDelay);\n                        };\n\n                        // There 2 types of test steps - simple and polling.\n                        // Upon completion of the simple test step the next test step will be called.\n                        // In case of polling test step the next test step is passed to the polling test step, and\n                        // it is responsibility of the polling test step to call the next test step.\n                        try {\n                            if (step[TestClass.isPollingStepFlag]) {\n                                step.call(this, nextTestStepTrigger);\n                            } else {\n                                step.call(this);\n                                nextTestStepTrigger.call(this);\n                            }\n                        } catch (e) {\n                            this._testCompleted();\n                            Assert.ok(false, e.toString());\n\n                            // done is QUnit callback indicating the end of the test\n                            done();\n\n                            return;\n                        }\n                    } else {\n                        this._testCompleted();\n\n                        // done is QUnit callback indicating the end of the test\n                        done();\n                    }\n                };\n\n                trigger();\n            } catch (ex) {\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\n                this._testCompleted(true);\n\n                // done is QUnit callback indicating the end of the test\n                done();\n            }\n        };\n\n        // Register the test with QUnit\n        QUnit.test(testInfo.name, testMethod);\n    }\n\n    /** Register a Javascript unit testcase. */\n    public testCase(testInfo: TestCase) {\n        if (!testInfo.name) {\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\n        }\n\n        if (!testInfo.test) {\n            throw new Error(\"Must specify 'test' method in testInfo context in registerTestcase call\");\n        }\n\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\n        const testMethod = () => {\n            // Save off the instance of the currently running suite.\n            TestClass.currentTestClass = this;\n\n            // Run the test.\n            try {\n                this._testStarting();\n\n                testInfo.test.call(this);\n\n                this._testCompleted();\n            }\n            catch (ex) {\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\n                this._testCompleted(true);\n            }\n        };\n\n        // Register the test with QUnit\n        test(testInfo.name, testMethod);\n    }\n\n    /** Called when the test is starting. */\n    private _testStarting() {\n        // Initialize the sandbox similar to what is done in sinon.js \"test()\" override. See note on class.\n        const config = (sinon as any).getConfig(sinon.config);\n        config.useFakeTimers = this.useFakeTimers;\n        config.useFakeServer = this.useFakeServer;\n\n        config.injectInto = config.injectIntoThis && this || config.injectInto;\n        this.sandbox = sinon.sandbox.create(config);\n        this.server = this.sandbox.server;\n\n        // Allow the derived class to perform test initialization.\n        this.testInitialize();\n    }\n\n    /** Called when the test is completed. */\n    private _testCompleted(failed?: boolean) {\n        if (failed) {\n            // Just cleanup the sandbox since the test has already failed.\n            this.sandbox.restore();\n        }\n        else {\n            // Verify the sandbox and restore.\n            (this.sandbox as any).verifyAndRestore();\n        }\n\n        this.testCleanup();\n\n        // Clear the instance of the currently running suite.\n        TestClass.currentTestClass = null;\n    }\n\n    /**** Sinon methods and properties ***/\n\n    // These methods and properties are injected by Sinon and will override the implementation here.\n    // These are here purely to make typescript happy.\n    public clock: SinonFakeTimers;\n    public server: SinonFakeServer;\n    public sandbox: SinonSandbox;\n\n    /** Creates an anonymous function that records arguments, this value, exceptions and return values for all calls. */\n    public spy(): SinonSpy;\n    /** Spies on the provided function */\n    public spy(funcToWrap: Function): SinonSpy;\n    /** Creates a spy for object.methodName and replaces the original method with the spy. The spy acts exactly like the original method in all cases. The original method can be restored by calling object.methodName.restore(). The returned spy is the function object which replaced the original method. spy === object.method. */\n    public spy(object: any, methodName: string, func?: Function): SinonSpy;\n    public spy(...args: any[]): SinonSpy { return null; }\n\n    /** Creates an anonymous stub function. */\n    public stub(): SinonStub;\n    /** Stubs all the object's methods. */\n    public stub(object: any): SinonStub;\n    /** Replaces object.methodName with a func, wrapped in a spy. As usual, object.methodName.restore(); can be used to restore the original method. */\n    public stub(object: any, methodName: string, func?: Function): SinonStub;\n    public stub(...args: any[]): SinonStub { return null; }\n\n    /** Creates a mock for the provided object.Does not change the object, but returns a mock object to set expectations on the object's methods. */\n    public mock(object: any): SinonMock { return null; }\n\n    /**** end: Sinon methods and properties ***/\n\n    /** Sends a JSON response to the provided request.\n     * @param request The request to respond to.\n     * @param data Data to respond with.\n     * @param errorCode Optional error code to send with the request, default is 200\n    */\n    public sendJsonResponse(request: SinonFakeXMLHttpRequest, data: any, errorCode?: number) {\n        if (errorCode === undefined) {\n            errorCode = 200;\n        }\n\n        request.respond(\n            errorCode,\n            { \"Content-Type\": \"application/json\" },\n            JSON.stringify(data));\n    }\n\n    protected setUserAgent(userAgent: string) {\n        Object.defineProperty(window.navigator, 'userAgent',\n            {\n                configurable: true,\n                get () {\n                    return userAgent;\n                }\n            });\n    }\n}\n\n// Configure Sinon\nsinon.assert.fail = function (msg?) {\n    Assert.ok(false, msg);\n};\n\nsinon.assert.pass = function (assertion) {\n    Assert.ok(assertion, \"sinon assert\");\n};\n\nsinon.config = {\n    injectIntoThis: true,\n    injectInto: null,\n    properties: [\"spy\", \"stub\", \"mock\", \"clock\", \"sandbox\"],\n    useFakeTimers: true,\n    useFakeServer: true\n};\n","/// <reference path=\"../External/sinon.d.ts\" />\n/// <reference path=\"../External/qunit.d.ts\" />\n/// <reference path=\"Assert.ts\" />\n/// <reference path=\"TestClass.ts\" />\n/// <reference path=\"TestCase.ts\" />","import MagicString from 'magic-string';\n\nexport interface IDynamicProtoRollupOptions {\n  tagname?: string,\n  comment?:string,\n  sourcemap?: boolean\n};\n\nfunction escape(str:string) {\n  return str.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n}\n\nfunction isSourceMapEnabled(options:any) {\n  if (options) {\n    return options.sourceMap !== false && options.sourcemap !== false;\n  }\n\n  return false;\n}\n\n// Need to mock this rather than rely on JavaScript String.prototype.padEnd() as it doesn't always\n// exists in the build / test infrastructure\nfunction padEnd(input:string, len:number, fill:string) {\n  let value = input||\"\";\n  while (value.length < len) {\n    value += fill;\n  }\n\n  if (value.length > len) {\n    value = value.substring(0, len);\n  }\n\n  return value;\n}\n\nfunction isNullOrWhitespace(value:string) {\n  if (value) {\n    return value.replace(/\\s/g, \"\").length < 1;\n  }\n\n  return true;\n}\n\n/**\n * Simple Rush plugin to remove code that is wrapped between specific comments, this is used to\n * remove the boilerplate code require by typescript to define methods as prototype level while\n * using @ms-dynamicProto project to support minification. This can also be used to remove \"debug\"\n * functions from the production code.\n */\nexport default function dynamicRemove(options:IDynamicProtoRollupOptions = {}) {\n  var token = (options || {}).tagname || \"@DynamicProtoStub\";\n  var replaceValue = (options || {}).comment || \"// Removed Stub for %function%.\";\n  let tokenGroups:Array<number> = [4, 10, 13];\n  let funcNameGroup:number = 6;\n\n  // Because of the test infrastructure (PhamtonJS) the RegEx can't use the \"s\" flag (gis vs gi) or named groups\n  const pattern = new RegExp(\"([\\\\t ]*\\\\/\\\\*\\\\*((?!\\\\*\\\\/)(.|\\\\r|\\\\n))*\\\\*\\\\/[\\\\s]*)*(\\\\/\\\\/[\\\\t ]*\" + escape(token) + \"[^\\\\r\\\\n]*(\\\\r\\\\n|\\\\n\\\\r|\\\\r|\\\\n))*[\\\\t ]*([\\\\w]*\\\\.prototype(\\\\.|\\\\[\\\\\\\"|\\\\[\\\\')[\\\\w]*(\\\\\\\"\\\\]|\\\\'\\\\])?)[\\\\t ]*=[\\\\t ]*function[\\\\t ]*\\\\([^\\\\{]*\\\\{[^\\\\/\\\\}\\\\{]*(\\\\{[^\\\\}]*\\\\}[^\\\\/\\\\}\\\\{]*)*(\\\\/[\\\\*\\\\/][\\\\t ]*\" + escape(token) + \"[^\\\\*\\\\r\\\\n]*(\\\\*\\\\/)?(\\\\r\\\\n|\\\\n\\\\r|\\\\r|\\\\n))*[^\\\\}]*\\\\};([\\\\t ]*\\\\/\\\\/[\\\\t ]*\" + escape(token) + \"[^\\\\r\\\\n]*)*\", 'gi');\n\n  function formatError(token:string, code:string, pos:number, id:string) {\n    let lines = code.split(/(?:\\r\\n|\\n\\r|\\r|\\n)/);\n    let lineNumber = 0;\n    let count = pos;\n    while (count > 0) {\n      lineNumber ++;\n      count = code.lastIndexOf(\"\\n\", count - 1);\n    }\n  \n    let column = 0;\n    let lineStart = code.lastIndexOf(\"\\n\", pos);\n    if (lineStart != -1) {\n      column = (pos - lineStart);\n    } else {\n      column = pos + 1;\n    }\n  \n    var message = \"Invalid (Unremoved) token [\" + token + \"] found on line [\" + lineNumber + \"], column [\" + column + \"], position [\" + pos + \"] - \" + (id||\"\") + \"\\n\";\n  \n    let marker = padEnd(\"\", token.length, \"^\");\n    let line = lineNumber - 6;\n    if (line > 0) {\n      message += \" ...\\n\";\n    }\n  \n    count = 0;\n    while (count < 10 && line < lines.length-1) {\n      count++;\n      if (line >= 0) {\n        let number = padEnd(\"\" + (line + 1), 4, \" \");\n        message += number + \":\" + lines[line] + \"\\n\";\n        if (line == lineNumber-1) {\n          message += padEnd(\"\", column + 4, \" \") + marker + \"\\n\";\n        }\n      }\n  \n      line++;\n    }\n  \n    if (line < lines.length-1) {\n      message += \" ...\\n\";\n    }\n  \n    let match;\n    let matchCount = 0;\n    while ((match = pattern.exec(code))) {\n      let funcName = match[funcNameGroup];\n      if (!isNullOrWhitespace(funcName)) {\n        if (matchCount == 0) {\n          message += \"\\nMatch checks\\n\";\n        }\n\n        matchCount++;\n        if (match[0].length > 0) {\n          message += \"Match \" + matchCount + \" tag Groups for \" + (funcName||\"\") + \"\\n\";\n          message += \"--=( Complete Matched Content )=--\\n\";\n          message += match[0];\n          message += \"\\n--------------------------------\\n\";\n          for(let lp = 1; lp < match.length; lp++) {\n            if (match[lp]) {\n              message += \"\" + lp + \": \" + (match[lp] || \"\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n              if ((match[lp]||\"\").indexOf(token) != -1) {\n                message += \" <- Contains tag\";\n              }\n              message += \"\\n\";\n            }\n          }\n          message += \"\\n\";\n        }\n      }\n    }\n  \n    return message;\n  }\n\n  function replaceToken(code:string, theString:MagicString) {\n    let result = false;\n    let match;\n    while ((match = pattern.exec(code))) {\n      let funcName = match[funcNameGroup];\n      if (!isNullOrWhitespace(funcName)) {\n        // Only remove matches that contain a tag and function\n        let hasToken = false;\n        for(let lp = 0; lp < tokenGroups.length; lp++) {\n          if ((match[tokenGroups[lp]]||\"\").indexOf(token) != -1) {\n            hasToken = true;\n            break;\n          }\n        }\n  \n        if (hasToken) {\n          result = true;\n          let start = match.index;\n          let newValue = replaceValue.replace(\"%function%\", funcName);\n          theString.overwrite(start, start + match[0].length, newValue);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function checkResult(result:string, id:string) {\n    if (result) {\n      let pos = result.indexOf(token);\n      if (pos != -1) {\n        throw new Error(formatError(token, result, pos, id));\n      }\n    }\n  }\n\n  function doTransform(code:string, id:string) {\n    let theString = new MagicString(code);\n    if (!replaceToken(code, theString)) {\n      return null;\n    }\n\n    let result:any = { code: theString.toString() };\n    if (isSourceMapEnabled(options)) {\n      result.map = theString.generateMap({hires: true});\n    }\n\n    return result;\n  }\n\n  function doTransformAndCheck(code:string, id:string) {\n    let result = doTransform(code, id);\n    if (result) {\n      // Do a final check of the string\n      checkResult(result.code, id);\n    } else {\n      // Check that the raw input doesn't include the tag\n      checkResult(code, id);\n    }\n\n    return result;\n  }\n\n  return {\n    name: 'dynamicRemove',\n    renderChunk(code:string, chunk:any) {\n      return doTransformAndCheck(code, chunk.filename);\n    },\n    transform: doTransformAndCheck\n  }\n}\n  \n  ","/// <reference path=\"./TestFramework/Common.ts\" />\n\nimport dynamicRemove from '../src/removeDynamic';\n\nexport class DynamicProtoRollupTests extends TestClass {\n\n    public testInitialize() {\n    }\n\n    private visibleNewlines(value) {\n        if (value) {\n            return value.replace(/\\r/g, \"\\\\r\").replace(/\\n/g, \"\\\\n\");\n        }\n\n        return value;\n    }\n\n    private convertNewlines(value, newline) {\n        if (value) {\n            return value.replace(/\\n/g, newline);\n        }\n\n        return value;\n    }\n\n    private testNoChange(options:any, input:string) {\n        let plugin = dynamicRemove(options);\n\n        QUnit.assert.equal(plugin.name, \"dynamicRemove\");\n        QUnit.assert.equal(plugin.renderChunk(input, { filename: \"test.js\" }), null);\n        QUnit.assert.equal(plugin.transform(input, \"testId\"), null);\n    }\n\n    private doTest(options:any, input:string, expected:string) {\n        this.testExpected(options, input, expected);\n        this.testExpected(options, this.convertNewlines(input, \"\\r\"), this.convertNewlines(expected, \"\\r\"));\n        this.testExpected(options, this.convertNewlines(input, \"\\r\\n\"), this.convertNewlines(expected, \"\\r\\n\"));\n        this.testExpected(options, this.convertNewlines(input, \"\\n\\r\"), this.convertNewlines(expected, \"\\n\\r\"));\n    }\n\n    private testExpected(options:any, input:string, expected:string) {\n        let plugin = dynamicRemove(options);\n\n        QUnit.assert.equal(plugin.name, \"dynamicRemove\");\n        let result = plugin.renderChunk(input, { filename: \"test.js\" });\n        QUnit.assert.equal(result != null ? result.code : null, expected, this.visibleNewlines(result != null ? result.code : null));\n\n        result = plugin.transform(input, \"testId\");\n        QUnit.assert.equal(result != null ? result.code : null, expected, this.visibleNewlines(result != null ? result.code : null));\n    }\n\n    private testError(options:any, message:string, input:string, expected:string) {\n        let plugin = dynamicRemove(options);\n\n        QUnit.assert.throws(() => {\n            plugin.renderChunk(input, { filename: \"test.js\" });\n        }, new Error(expected), message);\n\n        QUnit.assert.throws(() => {\n            plugin.transform(input, \"test.js\");\n        }, new Error(expected), message);\n    }\n\n    public registerTests() {\n        this.testCase({\n            name: \"No matching values for removal\",\n            test: () => {\n                this.testNoChange(null, \"Nothing removed\");\n\n                this.testNoChange(null, \"ClassName.prototype.anotherMethod = function () {\\n};\\n\");\n\n                this.testNoChange(null, \n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\");\n\n                this.testNoChange(null, \n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\");\n\n                this.testNoChange(null, \n                    \"// @Stub -- Type 1 comment\\n\" +\n                    \"function methodName() {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\");\n    \n                this.testNoChange(null, \n                    \"function methodName() {\\n\" +\n                    \"     // @Stub -- Type 2 single line comment\\n\" +\n                    \"};\\n\");\n    \n                this.testNoChange(null, \n                    \"function methodName() {\\n\" +\n                    \"     /* @Stub -- Type 2 multiline comment */\\n\" +\n                    \"};\\n\");\n    \n                this.testNoChange(null, \n                    \"function methodName() {\\n\" +\n                    \"     /* @Stub -- Type 2 multiline comment\\n\" +\n                    \"     * Continuation of a multi-line comment/\\n\" +\n                    \"     */\\n\" +\n                    \"};\\n\");\n                }\n        });\n\n        this.testCase({\n            name: \"Basic tag patterns\",\n            test: () => {\n                this.doTest(null, \n                    \"// @DynamicProtoStub -- Type 1 comment\\n\" +\n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\", \n                    \"// Removed Stub for ClassName.prototype.methodName.\\n\");\n    \n                this.doTest(null, \n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"     // @DynamicProtoStub -- Type 2 single line comment\\n\" +\n                    \"};\\n\", \n                    \"// Removed Stub for ClassName.prototype.methodName.\\n\");\n    \n                this.doTest(null, \n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"     /* @DynamicProtoStub -- Type 2 multiline comment */\\n\" +\n                    \"};\\n\", \n                    \"// Removed Stub for ClassName.prototype.methodName.\\n\");\n    \n                this.doTest(null, \n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"     /* @DynamicProtoStub -- Type 2 multiline comment\\n\" +\n                    \"     * Continuation of a multi-line comment/\\n\" +\n                    \"     */\\n\" +\n                    \"};\\n\", \n                    \"// Removed Stub for ClassName.prototype.methodName.\\n\");\n            }\n        });\n\n        this.testCase({\n            name: \"Mixed tagtype combinations\",\n            test: () => {\n                this.doTest(null, \n                    // Input, \n                    \"    /* ================================================================================================================\\n\" + \n                    \"     * DO NOT add any code to these empty implementations as any code defined here will be removed, as\\n\" + \n                    \"    /*\\n\" + \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype.func1 = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Process an event to add it to the local storage and then pass it to the next plugin.\\n\" + \n                    \"     * @param event - The event that needs to be stored.\\n\" + \n                    \"     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances\\n\" + \n                    \"     * can optionally use this to access the current core instance or define / pass additional information\\n\" + \n                    \"     * to later plugins (vs appending items to the telemetry item)\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func2 = function (evt, itemCtx) {\\n\" + \n                    \"    }; // @DynamicProtoStub  - Tag type 3\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Hello World\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func3 = function () {\\n\" + \n                    \"        // Normal Function\\n\" + \n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Process an event to add it to the local storage and then pass it to the next plugin.\\n\" + \n                    \"     * @param event - The event that needs to be stored.\\n\" + \n                    \"     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances\\n\" + \n                    \"     * can optionally use this to access the current core instance or define / pass additional information\\n\" + \n                    \"     * to later plugins (vs appending items to the telemetry item)\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func4 = function (evt, itemCtx) {\\n\" + \n                    \"        // @DynamicProtoStub  - Tag type 2.1\\n\" +\n                    \"    };\\n\" + \n                    \"    TestClass.prototype.func5 = function () {\\n\" + \n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Process an event to add it to the local storage and then pass it to the next plugin.\\n\" + \n                    \"     * @param event - The event that needs to be stored.\\n\" + \n                    \"     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances\\n\" + \n                    \"     * can optionally use this to access the current core instance or define / pass additional information\\n\" + \n                    \"     * to later plugins (vs appending items to the telemetry item)\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func6 = function (evt, itemCtx) {\\n\" + \n                    \"        /* @DynamicProtoStub  - Tag type 2.2 */\\n\" +\n                    \"    };\\n\" + \n                    \"    return TestClass;\",\n                    // Expected Value\n                    \"    /* ================================================================================================================\\n\" + \n                    \"     * DO NOT add any code to these empty implementations as any code defined here will be removed, as\\n\" + \n                    \"    /*\\n\" + \n                    \"// Removed Stub for TestClass.prototype.func1.\\n\" + \n                    \"// Removed Stub for TestClass.prototype.func2.\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Hello World\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func3 = function () {\\n\" + \n                    \"        // Normal Function\\n\" + \n                    \"    };\\n\" + \n                    \"// Removed Stub for TestClass.prototype.func4.\\n\" + \n                    \"    TestClass.prototype.func5 = function () {\\n\" + \n                    \"    };\\n\" + \n                    \"// Removed Stub for TestClass.prototype.func6.\\n\" + \n                    \"    return TestClass;\"\n                    );\n\n                this.testExpected(null, \n                    // Input, \n                    \"    /**\\r\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\r\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\r\\n\" + \n                    \"     * @param core       - The AppInsights core.\\r\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\r\\n\" + \n                    \"     */\\r\\n\" + \n                    \"    // @DynamicProtoStub \\r\\n\" + \n                    \"    TestClass.prototype.func1 = function (coreConfig, core, extensions, pluginChain) {\\r\\n\" + \n                    \"    };\\r\\n\" + \n                    \"    /**\\r\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\r\" + \n                    \"     * @param coreConfig - The core configuration.\\r\" + \n                    \"     * @param core       - The AppInsights core.\\r\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\r\" + \n                    \"     */\\r\" + \n                    \"    // @DynamicProtoStub \\r\" + \n                    \"    TestClass.prototype.func2 = function (coreConfig, core, extensions, pluginChain) {\\r\" + \n                    \"    };\\r\" + \n                    \"    /**\\n\\r\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\\r\" + \n                    \"     * @param coreConfig - The core configuration.\\n\\r\" + \n                    \"     * @param core       - The AppInsights core.\\n\\r\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\\r\" + \n                    \"     */\\n\\r\" + \n                    \"    // @DynamicProtoStub \\n\\r\" + \n                    \"    TestClass.prototype.func3 = function (coreConfig, core, extensions, pluginChain) {\\n\\r\" + \n                    \"    };\\n\\r\" + \n                    \"\",\n                    // Expected Value\n                    \"// Removed Stub for TestClass.prototype.func1.\\r\\n\" +\n                    \"// Removed Stub for TestClass.prototype.func2.\\r\" + \n                    \"// Removed Stub for TestClass.prototype.func3.\\n\\r\"\n                    );\n            }\n        });\n\n        this.testCase({\n            name: \"Stubs with return values\",\n            test: () => {\n                this.doTest(null, \n                    // Input, \n                    \"    /* ================================================================================================================\\n\" + \n                    \"     * DO NOT add any code to these empty implementations as any code defined here will be removed, as\\n\" + \n                    \"    /*\\n\" + \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype.func1 = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"        return;\\n\" +\n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Process an event to add it to the local storage and then pass it to the next plugin.\\n\" + \n                    \"     * @param event - The event that needs to be stored.\\n\" + \n                    \"     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances\\n\" + \n                    \"     * can optionally use this to access the current core instance or define / pass additional information\\n\" + \n                    \"     * to later plugins (vs appending items to the telemetry item)\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func2 = function (evt, itemCtx) {\\n\" + \n                    \"        return;\\n\" +\n                    \"    }; // @DynamicProtoStub  - Tag type 3\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Hello World\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func3 = function () {\\n\" + \n                    \"        // Normal Function\\n\" + \n                    \"        return;\\n\" +\n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Process an event to add it to the local storage and then pass it to the next plugin.\\n\" + \n                    \"     * @param event - The event that needs to be stored.\\n\" + \n                    \"     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances\\n\" + \n                    \"     * can optionally use this to access the current core instance or define / pass additional information\\n\" + \n                    \"     * to later plugins (vs appending items to the telemetry item)\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func4 = function (evt, itemCtx) {\\n\" + \n                    \"        // @DynamicProtoStub  - Tag type 2.1\\n\" +\n                    \"        return;\\n\" +\n                    \"    };\\n\" + \n                    \"    TestClass.prototype.func5 = function () {\\n\" + \n                    \"        return;\\n\" +\n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Process an event to add it to the local storage and then pass it to the next plugin.\\n\" + \n                    \"     * @param event - The event that needs to be stored.\\n\" + \n                    \"     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances\\n\" + \n                    \"     * can optionally use this to access the current core instance or define / pass additional information\\n\" + \n                    \"     * to later plugins (vs appending items to the telemetry item)\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func6 = function (evt, itemCtx) {\\n\" + \n                    \"        /* @DynamicProtoStub  - Tag type 2.2 */\\n\" +\n                    \"        return;\\n\" +\n                    \"    };\\n\" + \n                    \"    return TestClass;\",\n                    // Expected Value\n                    \"    /* ================================================================================================================\\n\" + \n                    \"     * DO NOT add any code to these empty implementations as any code defined here will be removed, as\\n\" + \n                    \"    /*\\n\" + \n                    \"// Removed Stub for TestClass.prototype.func1.\\n\" + \n                    \"// Removed Stub for TestClass.prototype.func2.\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Hello World\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype.func3 = function () {\\n\" + \n                    \"        // Normal Function\\n\" + \n                    \"        return;\\n\" +\n                    \"    };\\n\" + \n                    \"// Removed Stub for TestClass.prototype.func4.\\n\" + \n                    \"    TestClass.prototype.func5 = function () {\\n\" + \n                    \"        return;\\n\" +\n                    \"    };\\n\" + \n                    \"// Removed Stub for TestClass.prototype.func6.\\n\" + \n                    \"    return TestClass;\"\n                    );\n\n                this.doTest(null, \n                    // Input, \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype.func1 = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"        throw \\\"Not Implemented\\\";\\n\" +\n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype.func2 = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"        throw \\\"Not Implemented\\\";\\n\" +\n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype.func3 = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"        throw \\\"Not Implemented\\\";\\n\" +\n                    \"    };\\n\" + \n                    \"\",\n                    // Expected Value\n                    \"// Removed Stub for TestClass.prototype.func1.\\n\" +\n                    \"// Removed Stub for TestClass.prototype.func2.\\n\" + \n                    \"// Removed Stub for TestClass.prototype.func3.\\n\"\n                    );\n            }\n        });\n\n        this.testCase({\n            name: \"Test reserved (ES3) function names\",\n            test: () => {\n                this.doTest(null, \n                    // Input, \n                    \"    /* ================================================================================================================\\n\" + \n                    \"     * DO NOT add any code to these empty implementations as any code defined here will be removed, as\\n\" + \n                    \"    /*\\n\" + \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype[\\\"catch\\\"] = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Process an event to add it to the local storage and then pass it to the next plugin.\\n\" + \n                    \"     * @param event - The event that needs to be stored.\\n\" + \n                    \"     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances\\n\" + \n                    \"     * can optionally use this to access the current core instance or define / pass additional information\\n\" + \n                    \"     * to later plugins (vs appending items to the telemetry item)\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype[\\\"catch2\\\"] = function (evt, itemCtx) {\\n\" + \n                    \"        return;\\n\" +\n                    \"    }; // @DynamicProtoStub  - Tag type 3\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Hello World\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype[\\\"func3\\\"] = function () {\\n\" + \n                    \"        // Normal Function\\n\" + \n                    \"        return;\\n\" +\n                    \"    };\\n\" + \n                    \"    return TestClass;\",\n                    // Expected Value\n                    \"    /* ================================================================================================================\\n\" + \n                    \"     * DO NOT add any code to these empty implementations as any code defined here will be removed, as\\n\" + \n                    \"    /*\\n\" + \n                    \"// Removed Stub for TestClass.prototype[\\\"catch\\\"].\\n\" + \n                    \"// Removed Stub for TestClass.prototype[\\\"catch2\\\"].\\n\" + \n                    \"    /**\\n\" + \n                    \"     * Hello World\\n\" + \n                    \"     */\\n\" + \n                    \"    TestClass.prototype[\\\"func3\\\"] = function () {\\n\" + \n                    \"        // Normal Function\\n\" + \n                    \"        return;\\n\" +\n                    \"    };\\n\" +\n                    \"    return TestClass;\",\n                    );\n\n                this.doTest(null, \n                    // Input, \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype[\\\"catch\\\"] = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"        throw \\\"Not Implemented\\\";\" +\n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype[\\\"delete\\\"] = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"        throw \\\"Not Implemented\\\";\\n\" +\n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype[\\\"throw\\\"] = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"        throw \\\"Not Implemented\\\";\\n\" +\n                    \"    };\\n\" + \n                    \"    /**\\n\" + \n                    \"     * The function does the initial set up. It adds a notification listener to determine which events to remove.\\n\" + \n                    \"     * @param coreConfig - The core configuration.\\n\" + \n                    \"     * @param core       - The AppInsights core.\\n\" + \n                    \"     * @param extensions - An array of all the plugins being used.\\n\" + \n                    \"     */\\n\" + \n                    \"    // @DynamicProtoStub \\n\" + \n                    \"    TestClass.prototype['if'] = function (coreConfig, core, extensions, pluginChain) {\\n\" + \n                    \"        throw \\\"Not Implemented\\\";\\n\" +\n                    \"    };\\n\" + \n                    \"\",\n                    // Expected Value\n                    \"// Removed Stub for TestClass.prototype[\\\"catch\\\"].\\n\" +\n                    \"// Removed Stub for TestClass.prototype[\\\"delete\\\"].\\n\" + \n                    \"// Removed Stub for TestClass.prototype[\\\"throw\\\"].\\n\" +\n                    \"// Removed Stub for TestClass.prototype['if'].\\n\"\n                    );\n            }\n        });\n\n        this.testCase({\n            name: \"Test unconverted tags from partial conversion\",\n            test: () => {\n                this.testError(null, \n                    \"1 -- Type 1 comment\",\n                    \"// @DynamicProtoStub -- Type 1 comment\\n\" +\n                    \"function methodName() {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\",\n                    \"Invalid (Unremoved) token [@DynamicProtoStub] found on line [1], column [4], position [3] - test.js\\n\" +\n                    \"1   :// @DynamicProtoStub -- Type 1 comment\\n\" +\n                    \"        ^^^^^^^^^^^^^^^^^\\n\" +\n                    \"2   :function methodName() {\\n\" +\n                    \"3   :    // This is a comment for a dynamic proto stub\\n\" +\n                    \"4   :};\\n\");\n    \n                this.testError(null, \n                    \"2 -- Type 2 single line comment\",\n                    \"function methodName() {\\n\" +\n                    \"    // @DynamicProtoStub -- Type 2 single line comment\\n\" +\n                    \"};\\n\",\n                    \"Invalid (Unremoved) token [@DynamicProtoStub] found on line [2], column [8], position [31] - test.js\\n\" +\n                    \"1   :function methodName() {\\n\" +\n                    \"2   :    // @DynamicProtoStub -- Type 2 single line comment\\n\" +\n                    \"            ^^^^^^^^^^^^^^^^^\\n\" +\n                    \"3   :};\\n\");\n    \n                this.testError(null,\n                    \"3 -- Type 2 multiline comment\",\n                    \"function methodName() {\\n\" +\n                    \"    /* @DynamicProtoStub -- Type 2 multiline comment */\\n\" +\n                    \"};\\n\",\n                    \"Invalid (Unremoved) token [@DynamicProtoStub] found on line [2], column [8], position [31] - test.js\\n\" +\n                    \"1   :function methodName() {\\n\" +\n                    \"2   :    /* @DynamicProtoStub -- Type 2 multiline comment */\\n\" +\n                    \"            ^^^^^^^^^^^^^^^^^\\n\" +\n                    \"3   :};\\n\");\n    \n                this.testError(null,\n                    \"4 -- Type 2 multiline comment (2)\",\n                    \"function methodName() {\\n\" +\n                    \"    /* @DynamicProtoStub -- Type 2 multiline comment\\n\" +\n                    \"    * Continuation of a multi-line comment/\\n\" +\n                    \"    */\\n\" +\n                    \"};\\n\",\n                    \"Invalid (Unremoved) token [@DynamicProtoStub] found on line [2], column [8], position [31] - test.js\\n\" +\n                    \"1   :function methodName() {\\n\" +\n                    \"2   :    /* @DynamicProtoStub -- Type 2 multiline comment\\n\" +\n                    \"            ^^^^^^^^^^^^^^^^^\\n\" +\n                    \"3   :    * Continuation of a multi-line comment/\\n\" +\n                    \"4   :    */\\n\" +\n                    \"5   :};\\n\");\n\n                this.testError(null,\n                    \"5 -- Type 1 comment\",\n                    \"// @DynamicProtoStub -- Type 1 comment\\n\" +\n                    \"function methodName() {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\" +\n                    \"// @DynamicProtoStub -- Type 1 comment\\n\" +\n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\",\n                    \"Invalid (Unremoved) token [@DynamicProtoStub] found on line [1], column [4], position [3] - test.js\\n\" +\n                    \"1   :// @DynamicProtoStub -- Type 1 comment\\n\" +\n                    \"        ^^^^^^^^^^^^^^^^^\\n\" +\n                    \"2   :function methodName() {\\n\" +\n                    \"3   :    // This is a comment for a dynamic proto stub\\n\" +\n                    \"4   :};\\n\" +\n                    \"5   :// Removed Stub for ClassName.prototype.methodName.\\n\");\n\n    \n                this.testError(null,\n                    \"6 -- Type 2 single line comment\",\n                    \"function methodName() {\\n\" +\n                    \"    // @DynamicProtoStub -- Type 2 single line comment\\n\" +\n                    \"};\\n\" +\n                    \"// @DynamicProtoStub -- Type 1 comment\\n\" +\n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\",\n                    \"Invalid (Unremoved) token [@DynamicProtoStub] found on line [2], column [8], position [31] - test.js\\n\" +\n                    \"1   :function methodName() {\\n\" +\n                    \"2   :    // @DynamicProtoStub -- Type 2 single line comment\\n\" +\n                    \"            ^^^^^^^^^^^^^^^^^\\n\" +\n                    \"3   :};\\n\" +\n                    \"4   :// Removed Stub for ClassName.prototype.methodName.\\n\");\n    \n                this.testError(null,\n                    \"7 -- Type 2 multiline comment */\",\n                    \"function methodName() {\\n\" +\n                    \"    /* @DynamicProtoStub -- Type 2 multiline comment */\\n\" +\n                    \"};\\n\" +\n                    \"// @DynamicProtoStub -- Type 1 comment\\n\" +\n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\",\n                    \"Invalid (Unremoved) token [@DynamicProtoStub] found on line [2], column [8], position [31] - test.js\\n\" +\n                    \"1   :function methodName() {\\n\" +\n                    \"2   :    /* @DynamicProtoStub -- Type 2 multiline comment */\\n\" +\n                    \"            ^^^^^^^^^^^^^^^^^\\n\" +\n                    \"3   :};\\n\" +\n                    \"4   :// Removed Stub for ClassName.prototype.methodName.\\n\");\n    \n                this.testError(null,\n                    \"8 -- Type 2 multiline comment (2)\",\n                    \"function methodName() {\\n\" +\n                    \"    /* @DynamicProtoStub -- Type 2 multiline comment\\n\" +\n                    \"    * Continuation of a multi-line comment/\\n\" +\n                    \"    */\\n\" +\n                    \"};\\n\" +\n                    \"// @DynamicProtoStub -- Type 1 comment\\n\" +\n                    \"ClassName.prototype.methodName = function () {\\n\" +\n                    \"    // This is a comment for a dynamic proto stub\\n\" +\n                    \"};\\n\",\n                    \"Invalid (Unremoved) token [@DynamicProtoStub] found on line [2], column [8], position [31] - test.js\\n\" +\n                    \"1   :function methodName() {\\n\" +\n                    \"2   :    /* @DynamicProtoStub -- Type 2 multiline comment\\n\" +\n                    \"            ^^^^^^^^^^^^^^^^^\\n\" +\n                    \"3   :    * Continuation of a multi-line comment/\\n\" +\n                    \"4   :    */\\n\" +\n                    \"5   :};\\n\" +\n                    \"6   :// Removed Stub for ClassName.prototype.methodName.\\n\");\n            }\n        });\n\n\n        this.testCase({\n            name: \"Test prefixed comment with typescript boilerplate for spread and default arguments\",\n            test: () => {\n                this.doTest(null, \n                    \"/**\\n\" +\n                    \" * This method tells if given durations should be excluded from collection.\\n\" +\n                    \" */\\n\" +\n                    \"PageViewPerformanceManager.prototype.shouldCollectDuration = function () {\\n\" +\n                    \"    var durations = [];\\n\" +\n                    \"    for (var _i = 0; _i < arguments.length; _i++) {\\n\" +\n                    \"        durations[_i] = arguments[_i];\\n\" +\n                    \"    }\\n\" +\n                    \"    // @DynamicProtoStub\\n\" +\n                    \"    return true;\\n\" +\n                    \"};\\n\",\n                    \"// Removed Stub for PageViewPerformanceManager.prototype.shouldCollectDuration.\\n\");\n\n                this.doTest(null,\n                    \"    /**\\n\" + \n                    \" * Manually trigger an immediate send of all telemetry still in the buffer using beacon Sender.\\n\" + \n                    \" * Fall back to xhr sender if beacon is not supported.\\n\" + \n                    \" * @param {boolean} [async=true]\\n\" + \n                    \" * @memberof Initialization\\n\" + \n                    \" */\\n\" + \n                    \"Initialization.prototype.onunloadFlush = function (async) {\\n\" + \n                    \"   if (async === void 0) { async = true; }\\n\" + \n                    \"    // @DynamicProtoStub\\n\" +\n                    \"};\\n\",\n                    \"// Removed Stub for Initialization.prototype.onunloadFlush.\\n\");\n\n                this.doTest(null, \n                    \"/**\\n\" +\n                    \" * This method tells if given durations should be excluded from collection.\\n\" +\n                    \" */\\n\" +\n                    \"PageViewPerformanceManager.prototype.shouldCollectDuration = function () {\\n\" +\n                    \"    var durations = [];\\n\" +\n                    \"    for (var _i = 0; _i < arguments.length; _i++) {\\n\" +\n                    \"        durations[_i] = arguments[_i];\\n\" +\n                    \"    }\\n\" +\n                    \"    /* @DynamicProtoStub\\n\" +\n                    \"    */\\n\" +\n                    \"    return true;\\n\" +\n                    \"};\\n\",\n                    \"// Removed Stub for PageViewPerformanceManager.prototype.shouldCollectDuration.\\n\");\n\n                this.doTest(null,\n                    \"    /**\\n\" + \n                    \" * Manually trigger an immediate send of all telemetry still in the buffer using beacon Sender.\\n\" + \n                    \" * Fall back to xhr sender if beacon is not supported.\\n\" + \n                    \" * @param {boolean} [async=true]\\n\" + \n                    \" * @memberof Initialization\\n\" + \n                    \" */\\n\" + \n                    \"Initialization.prototype.onunloadFlush = function (async) {\\n\" + \n                    \"   if (async === void 0) { async = true; }\\n\" + \n                    \"    /* @DynamicProtoStub\\n\" +\n                    \"    */\\n\" +\n                    \"};\\n\",\n                    \"// Removed Stub for Initialization.prototype.onunloadFlush.\\n\");\n                }\n        });\n    }\n}\n","import { DynamicProtoRollupTests } from '../DynamicProtoRollup.Tests';\n\nexport function runTests() {\n    new DynamicProtoRollupTests().registerTests();\n}\n"]}